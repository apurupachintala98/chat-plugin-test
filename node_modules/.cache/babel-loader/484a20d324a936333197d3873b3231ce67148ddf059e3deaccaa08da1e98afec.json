{"ast":null,"code":"var _jsxFileName = \"/Users/apurupachintala/Documents/GitHub/chat-plugin-test/src/components/UserChat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useLayoutEffect, useEffect } from 'react';\nimport { Alert } from 'flowbite-react';\nimport { FaTelegramPlane } from 'react-icons/fa';\nimport HashLoader from 'react-spinners/HashLoader';\nimport ChatMessage from './ChatMessage';\nimport { Box, Grid, TextField, Button, IconButton, Typography, InputAdornment, Toolbar, useTheme, useMediaQuery, Modal, Backdrop, Fade, FormControlLabel, Checkbox } from '@mui/material';\nimport ChartModal from './ChartModal';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport { format as sqlFormatter } from 'sql-formatter';\nimport hljs from 'highlight.js/lib/core';\nimport sql from 'highlight.js/lib/languages/sql';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nhljs.registerLanguage('sql', sql);\nfunction UserChat(props) {\n  _s();\n  const theme = useTheme();\n  const isSmallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n  const isMediumScreen = useMediaQuery(theme.breakpoints.between('sm', 'md'));\n  const {\n    chatLog,\n    setChatLog,\n    themeColor,\n    responseReceived,\n    setResponseReceived,\n    error,\n    setError,\n    chatInitialMessage,\n    isLoading,\n    setIsLoading,\n    successMessage,\n    setSuccessMessage,\n    showInitialView,\n    setShowInitialView,\n    requestId,\n    setRequestId,\n    apiPath,\n    appCd,\n    customStyles = {},\n    chatbotImage,\n    userImage,\n    handleNewChat\n  } = props;\n  const endOfMessagesRef = useRef(null);\n  const [apiResponse, setApiResponse] = useState(null); // New state for storing API response\n  const [input, setInput] = useState('');\n  const layoutWidth = isSmallScreen ? '100%' : isMediumScreen ? '80%' : '70%';\n  const inactivityTimeoutRef = useRef(null); // Ref for the inactivity timeout\n  const [sessionActive, setSessionActive] = useState(true); // State to track session activity\n  const [openPopup, setOpenPopup] = useState(false);\n  const INACTIVITY_TIME = 10 * 60 * 1000;\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [storedResponse, setStoredResponse] = useState(''); // New state to store the response\n  const [showButton, setShowButton] = useState(false); // New state to show/hide the button\n  // const [showSQL, setShowSQL] = useState(false); // State for toggling SQL visibility\n  const [executeSQL, setExecuteSQL] = useState(false);\n  // const [sqlQuery, setSQLQuery] = useState(null);\n  const [isSQLResponse, setIsSQLResponse] = useState(false);\n  const [data, setData] = useState('');\n  useLayoutEffect(() => {\n    if (endOfMessagesRef.current) {\n      endOfMessagesRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [chatLog]);\n  const handleGraphClick = () => {\n    setIsModalVisible(true);\n  };\n  const handleModalClose = () => {\n    setIsModalVisible(false);\n  };\n  // Handle session end due to inactivity\n  const handleSessionEnd = () => {\n    setSessionActive(false);\n    setChatLog([...chatLog, {\n      role: 'assistant',\n      content: 'Session has ended due to inactivity.'\n    }]);\n    setOpenPopup(true); // Show the popup\n  };\n\n  // const handleShowSQLChange = (event) => {\n  //   setShowSQL(event.target.checked);\n  // };\n\n  // Start or reset the inactivity timer\n  const resetInactivityTimeout = () => {\n    if (inactivityTimeoutRef.current) {\n      clearTimeout(inactivityTimeoutRef.current);\n    }\n    inactivityTimeoutRef.current = setTimeout(() => {\n      handleSessionEnd(); // End session after 30 minutes of inactivity\n    }, INACTIVITY_TIME);\n  };\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    // Prevent empty messages\n    if (!input.trim()) return;\n    if (!appCd.trim() || !requestId.trim()) {\n      setError('Please provide valid app_cd and request_id.');\n      return;\n    }\n    const newMessage = {\n      role: 'user',\n      content: input\n    };\n    const newChatLog = [...chatLog, newMessage]; // Add user's message to chat log\n    setChatLog(newChatLog);\n    setInput(''); // Clear the input field\n    setIsLoading(true); // Set loading state\n    setError(''); // Clear any previous error\n    setShowInitialView(false);\n    try {\n      // Dynamic API URL based on user inputs\n      const response = await fetch(`http://localhost:8000/get_llm_response/?app_cd=Chat_bot&request_id=8000`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify([newMessage])\n      });\n\n      // Check if response is okay\n      if (!response.ok) {\n        let errorMessage = '';\n\n        // Handle different status codes\n        if (response.status === 404) {\n          errorMessage = '404 - Not Found';\n        } else if (response.status === 500) {\n          errorMessage = '500 - Internal Server Error';\n        } else {\n          errorMessage = `${response.status} - ${response.statusText}`;\n        }\n\n        // // Display the image and error message\n        const botMessage = {\n          role: 'assistant',\n          content: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              flexDirection: 'column'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                fontSize: '18px',\n                fontWeight: 'bold',\n                textAlign: 'center'\n              },\n              children: errorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this)\n        };\n        setChatLog([...newChatLog, botMessage]); // Update chat log with assistant's error message\n        throw new Error(errorMessage); // Re-throw the error for logging purposes\n      }\n      const data = await response.json();\n      setApiResponse(data);\n\n      // Function to convert object to string (if needed)\n      const convertToString = input => {\n        if (typeof input === 'string') {\n          return input;\n        } else if (Array.isArray(input)) {\n          // Recursively convert array items\n          return input.map(convertToString).join(', ');\n        } else if (typeof input === 'object' && input !== null) {\n          // Convert key-value pairs\n          return Object.entries(input).map(([key, value]) => `${key}: ${convertToString(value)}`).join(', ');\n        }\n        return String(input);\n      };\n\n      // Determine how to handle the response\n      let modelReply = 'No valid reply found.'; // Default message\n      if (data.modelreply) {\n        // Check if the response is a JSON array of objects\n        if (Array.isArray(data.modelreply) && data.modelreply.every(item => typeof item === 'object')) {\n          const columnCount = Object.keys(data.modelreply[0]).length;\n          const rowCount = data.modelreply.length;\n          // Convert to table-like format with borders for display\n          modelReply = /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'start'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"table\", {\n              style: {\n                borderCollapse: 'collapse',\n                width: '100%'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: Object.keys(data.modelreply[0]).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n                    style: {\n                      border: '1px solid black',\n                      padding: '8px',\n                      textAlign: 'left'\n                    },\n                    children: key\n                  }, key, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 181,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: data.modelreply.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: Object.values(row).map((val, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n                    style: {\n                      border: '1px solid black',\n                      padding: '8px'\n                    },\n                    children: convertToString(val)\n                  }, colIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 189,\n                    columnNumber: 25\n                  }, this))\n                }, rowIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this), rowCount > 1 && columnCount > 1 && /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              startIcon: /*#__PURE__*/_jsxDEV(BarChartIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 30\n              }, this),\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                padding: '8px 16px',\n                marginLeft: '15px',\n                width: '190px',\n                fontSize: '10px',\n                fontWeight: 'bold'\n              },\n              onClick: handleGraphClick,\n              children: \"Graph View\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this);\n        } else if (typeof data.modelreply === 'string') {\n          // If it's a string, display it as text and store it in the state\n          if (data.modelreply.toLowerCase().includes('select')) {\n            modelReply = sqlFormatter(data.modelreply); // Format the SQL query\n          } else {\n            modelReply = data.modelreply;\n          }\n          setStoredResponse(data.modelreply);\n          setShowButton(true);\n        } else {\n          // Otherwise, convert to string\n          modelReply = convertToString(data.modelreply);\n        }\n      }\n      isSQLResponse = data.modelreply.toLowerCase().includes('select');\n      const botMessage = {\n        role: 'assistant',\n        content: modelReply,\n        isSQLResponse // Attach this flag to the bot message\n      };\n      setChatLog([...newChatLog, botMessage]); // Update chat log with assistant's message\n    } catch (err) {\n      let fallbackErrorMessage = 'Error communicating with backend.';\n      const errorMessage = {\n        role: 'assistant',\n        content: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            flexDirection: 'column'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontSize: '18px',\n              fontWeight: 'bold',\n              textAlign: 'center'\n            },\n            children: fallbackErrorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this)\n      };\n      setChatLog([...newChatLog, errorMessage]);\n      setError('Error communicating with backend');\n      console.error('Error:', err);\n    } finally {\n      setIsLoading(false); // Set loading state to false\n      setShowSQL(false);\n    }\n  }\n  const handleInputFocusOrChange = () => {\n    setShowInitialView(false);\n    resetInactivityTimeout();\n  };\n  useEffect(() => {\n    resetInactivityTimeout();\n    return () => {\n      if (inactivityTimeoutRef.current) clearTimeout(inactivityTimeoutRef.current);\n    };\n  }, []);\n  const handleButtonClick = async () => {\n    try {\n      const encodedResponse = encodeURIComponent(storedResponse); // Encode the storedResponse\n      const response = await fetch(`http://localhost:8000/run_sql_query/?exec_query=${encodedResponse}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Check if response is okay\n      if (!response.ok) {\n        let errorMessage = '';\n\n        // Handle different status codes\n        if (response.status === 404) {\n          errorMessage = '404 - Not Found';\n        } else if (response.status === 500) {\n          errorMessage = '500 - Internal Server Error';\n        } else {\n          errorMessage = `${response.status} - ${response.statusText}`;\n        }\n\n        // Create an error message object\n        const errorMessageContent = {\n          role: 'assistant',\n          content: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              flexDirection: 'column'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                fontSize: '18px',\n                fontWeight: 'bold',\n                textAlign: 'center'\n              },\n              children: errorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 13\n          }, this)\n        };\n        setChatLog(prevChatLog => [...prevChatLog, errorMessageContent]); // Update chat log with assistant's error message\n        throw new Error(errorMessage); // Re-throw the error for logging purposes\n      }\n      const data = await response.json();\n      setData(data);\n\n      // Function to convert object to string\n      const convertToString = input => {\n        if (typeof input === 'string') {\n          return input;\n        } else if (Array.isArray(input)) {\n          return input.map(convertToString).join(', ');\n        } else if (typeof input === 'object' && input !== null) {\n          return Object.entries(input).map(([key, value]) => `${key}: ${convertToString(value)}`).join(', ');\n        }\n        return String(input);\n      };\n\n      // Handle the response data similarly to handleSubmit\n      let modelReply = 'No valid reply found.'; // Default message\n      if (data) {\n        // Check if the response is a JSON array of objects\n        if (Array.isArray(data) && data.every(item => typeof item === 'object')) {\n          const columnCount = Object.keys(data[0]).length;\n          const rowCount = data.length;\n\n          // Convert to a table-like format with borders for display\n          modelReply = /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'start'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"table\", {\n              style: {\n                borderCollapse: 'collapse',\n                width: '100%'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: Object.keys(data[0]).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n                    style: {\n                      border: '1px solid black',\n                      padding: '8px',\n                      textAlign: 'left'\n                    },\n                    children: key\n                  }, key, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 331,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 329,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: data.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: Object.values(row).map((val, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n                    style: {\n                      border: '1px solid black',\n                      padding: '8px'\n                    },\n                    children: convertToString(val)\n                  }, colIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 339,\n                    columnNumber: 25\n                  }, this))\n                }, rowIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 337,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 15\n            }, this), rowCount > 1 && columnCount > 1 && /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              startIcon: /*#__PURE__*/_jsxDEV(BarChartIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 30\n              }, this),\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                padding: '8px 16px',\n                marginLeft: '15px',\n                width: '190px',\n                fontSize: '10px',\n                fontWeight: 'bold'\n              },\n              onClick: handleGraphClick,\n              children: \"Graph View\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 13\n          }, this);\n        } else if (typeof data === 'string') {\n          // If it's a string, display it as text and store it in the state\n          modelReply = data;\n          //setStoredResponse(data);\n          setIsLoading(true);\n        } else {\n          // Otherwise, convert to string\n          modelReply = convertToString(data);\n        }\n      }\n      const botMessage = {\n        role: 'assistant',\n        content: modelReply\n      };\n      setChatLog(prevChatLog => [...prevChatLog, botMessage]); // Update chat log with assistant's message\n    } catch (err) {\n      // Handle network errors or other unexpected issues\n      const fallbackErrorMessage = 'Error communicating with backend.';\n      const errorMessageContent = {\n        role: 'assistant',\n        content: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            flexDirection: 'column'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontSize: '18px',\n              fontWeight: 'bold',\n              textAlign: 'center'\n            },\n            children: fallbackErrorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this)\n      };\n      setChatLog(prevChatLog => [...prevChatLog, errorMessageContent]); // Update chat log with assistant's error message\n      console.error('Error:', err); // Log the error for debugging\n    } finally {\n      setIsLoading(false); // Set loading state to false\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      width: layoutWidth,\n      flexDirection: 'column',\n      margin: 'auto',\n      ...customStyles.container\n    },\n    children: [showInitialView && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '40px',\n          height: 'auto',\n          overflow: 'hidden',\n          marginRight: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: chatbotImage,\n          alt: \"Chatbot\",\n          style: {\n            width: '100%',\n            height: '100%',\n            objectFit: 'contain'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        component: \"p\",\n        sx: {\n          marginTop: '10px',\n          fontSize: '16.5px',\n          fontWeight: 600,\n          color: themeColor,\n          textAlign: 'center',\n          marginBottom: '19%',\n          ...customStyles.initialPrompt\n        },\n        children: chatInitialMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flex: 1,\n        width: '100%',\n        overflowY: 'auto',\n        maxHeight: '73vh',\n        padding: '10px',\n        ...customStyles.chatContainer\n      },\n      children: [/*#__PURE__*/_jsxDEV(ChatMessage, {\n        chatLog: chatLog,\n        chatbotImage: chatbotImage,\n        userImage: userImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this), showButton && /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        control: /*#__PURE__*/_jsxDEV(Checkbox, {\n          checked: executeSQL,\n          onChange: handleButtonClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 22\n        }, this),\n        label: \"Execute SQL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: endOfMessagesRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(HashLoader, {\n        color: themeColor,\n        size: 30,\n        \"aria-label\": \"Loading Spinner\",\n        \"data-testid\": \"loader\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 23\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(Alert, {\n        color: \"success\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: successMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 51\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        width: '100%',\n        maxWidth: '100%',\n        flexDirection: 'column',\n        ...customStyles.inputContainer\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        sx: {\n          width: '100%',\n          maxWidth: '100%',\n          position: 'fixed',\n          bottom: '50px',\n          left: '67%',\n          transform: 'translateX(-50%)',\n          width: '70%',\n          marginLeft: '8px',\n          flexDirection: 'column'\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            style: {\n              width: '100%',\n              backgroundColor: '#fff',\n              boxShadow: '0px -2px 5px rgba(0, 0, 0, 0.1)',\n              ...customStyles.form\n            },\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              placeholder: \"What can I help you with...\",\n              value: input,\n              onChange: e => {\n                setInput(e.target.value);\n                handleInputFocusOrChange(); // Ensure elements disappear when typing\n              },\n              onFocus: handleInputFocusOrChange,\n              inputProps: {\n                maxLength: 400\n              },\n              InputProps: {\n                sx: {\n                  '& .MuiInputBase-input': {\n                    padding: '12px',\n                    fontSize: '13px',\n                    fontWeight: 'bold',\n                    color: themeColor\n                  },\n                  '& .MuiInputAdornment-root button': {\n                    color: themeColor\n                  }\n                },\n                endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                  position: \"end\",\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    type: \"submit\",\n                    children: /*#__PURE__*/_jsxDEV(FaTelegramPlane, {\n                      className: \"h-6 w-6\",\n                      color: themeColor\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 511,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 510,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 509,\n                  columnNumber: 21\n                }, this)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChartModal, {\n      visible: isModalVisible,\n      onClose: handleModalClose,\n      chartData: data || [] // Ensure you pass valid JSON data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: openPopup,\n      onClose: (event, reason) => {\n        if (reason !== \"backdropClick\") {\n          setOpenPopup(false);\n        }\n      },\n      closeAfterTransition: true,\n      BackdropComponent: Backdrop,\n      BackdropProps: {\n        timeout: 500\n      },\n      children: /*#__PURE__*/_jsxDEV(Fade, {\n        in: openPopup,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            width: 300,\n            bgcolor: 'background.paper',\n            borderRadius: '8px',\n            boxShadow: 24,\n            p: 4,\n            textAlign: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            sx: {\n              fontWeight: 'bold'\n            },\n            children: \"Session Ended\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: {\n              mt: 2\n            },\n            children: \"Your session has ended due to 10 minutes of inactivity.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => {\n              setOpenPopup(false); // Close modal\n              handleNewChat(); // Start new chat\n            },\n            sx: {\n              mt: 2\n            },\n            children: \"New Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 396,\n    columnNumber: 5\n  }, this);\n}\n_s(UserChat, \"uDrBiBptlk2j2kfKflxq4cSI7oo=\", false, function () {\n  return [useTheme, useMediaQuery, useMediaQuery];\n});\n_c = UserChat;\n;\nexport default UserChat;\nvar _c;\n$RefreshReg$(_c, \"UserChat\");","map":{"version":3,"names":["React","useState","useRef","useLayoutEffect","useEffect","Alert","FaTelegramPlane","HashLoader","ChatMessage","Box","Grid","TextField","Button","IconButton","Typography","InputAdornment","Toolbar","useTheme","useMediaQuery","Modal","Backdrop","Fade","FormControlLabel","Checkbox","ChartModal","BarChartIcon","format","sqlFormatter","hljs","sql","jsxDEV","_jsxDEV","Fragment","_Fragment","registerLanguage","UserChat","props","_s","theme","isSmallScreen","breakpoints","down","isMediumScreen","between","chatLog","setChatLog","themeColor","responseReceived","setResponseReceived","error","setError","chatInitialMessage","isLoading","setIsLoading","successMessage","setSuccessMessage","showInitialView","setShowInitialView","requestId","setRequestId","apiPath","appCd","customStyles","chatbotImage","userImage","handleNewChat","endOfMessagesRef","apiResponse","setApiResponse","input","setInput","layoutWidth","inactivityTimeoutRef","sessionActive","setSessionActive","openPopup","setOpenPopup","INACTIVITY_TIME","isModalVisible","setIsModalVisible","storedResponse","setStoredResponse","showButton","setShowButton","executeSQL","setExecuteSQL","isSQLResponse","setIsSQLResponse","data","setData","current","scrollIntoView","behavior","handleGraphClick","handleModalClose","handleSessionEnd","role","content","resetInactivityTimeout","clearTimeout","setTimeout","handleSubmit","e","preventDefault","trim","newMessage","newChatLog","response","fetch","method","headers","body","JSON","stringify","ok","errorMessage","status","statusText","botMessage","style","display","alignItems","flexDirection","children","fontSize","fontWeight","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","Error","json","convertToString","Array","isArray","map","join","Object","entries","key","value","String","modelReply","modelreply","every","item","columnCount","keys","length","rowCount","borderCollapse","width","border","padding","row","rowIndex","values","val","colIndex","variant","color","startIcon","sx","marginLeft","onClick","toLowerCase","includes","err","fallbackErrorMessage","console","setShowSQL","handleInputFocusOrChange","handleButtonClick","encodedResponse","encodeURIComponent","errorMessageContent","prevChatLog","justifyContent","margin","container","height","overflow","marginRight","src","alt","objectFit","component","marginTop","marginBottom","initialPrompt","flex","overflowY","maxHeight","chatContainer","control","checked","onChange","label","ref","size","maxWidth","inputContainer","spacing","position","bottom","left","transform","xs","sm","onSubmit","backgroundColor","boxShadow","form","fullWidth","placeholder","target","onFocus","inputProps","maxLength","InputProps","endAdornment","type","className","visible","onClose","chartData","open","event","reason","closeAfterTransition","BackdropComponent","BackdropProps","timeout","in","top","bgcolor","borderRadius","p","mt","_c","$RefreshReg$"],"sources":["/Users/apurupachintala/Documents/GitHub/chat-plugin-test/src/components/UserChat.jsx"],"sourcesContent":["import React, { useState, useRef, useLayoutEffect, useEffect } from 'react';\nimport { Alert } from 'flowbite-react';\nimport { FaTelegramPlane } from 'react-icons/fa';\nimport HashLoader from 'react-spinners/HashLoader';\nimport ChatMessage from './ChatMessage';\nimport { Box, Grid, TextField, Button, IconButton, Typography, InputAdornment, Toolbar, useTheme, useMediaQuery, Modal, Backdrop, Fade, FormControlLabel, Checkbox } from '@mui/material';\nimport ChartModal from './ChartModal';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport { format as sqlFormatter } from 'sql-formatter';\nimport hljs from 'highlight.js/lib/core';\nimport sql from 'highlight.js/lib/languages/sql';\n\nhljs.registerLanguage('sql', sql);\nfunction UserChat(props) {\n  const theme = useTheme();\n  const isSmallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n  const isMediumScreen = useMediaQuery(theme.breakpoints.between('sm', 'md'));\n\n  const {\n    chatLog, setChatLog,\n    themeColor,\n    responseReceived, setResponseReceived,\n    error, setError,\n    chatInitialMessage,\n    isLoading, setIsLoading,\n    successMessage, setSuccessMessage,\n    showInitialView, setShowInitialView,\n    requestId, setRequestId, apiPath, appCd, customStyles = {}, chatbotImage, userImage, handleNewChat\n  } = props;\n\n  const endOfMessagesRef = useRef(null);\n  const [apiResponse, setApiResponse] = useState(null); // New state for storing API response\n  const [input, setInput] = useState('');\n  const layoutWidth = isSmallScreen ? '100%' : isMediumScreen ? '80%' : '70%';\n  const inactivityTimeoutRef = useRef(null); // Ref for the inactivity timeout\n  const [sessionActive, setSessionActive] = useState(true); // State to track session activity\n  const [openPopup, setOpenPopup] = useState(false);\n  const INACTIVITY_TIME = 10 * 60 * 1000;\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [storedResponse, setStoredResponse] = useState(''); // New state to store the response\n  const [showButton, setShowButton] = useState(false); // New state to show/hide the button\n  // const [showSQL, setShowSQL] = useState(false); // State for toggling SQL visibility\n  const [executeSQL, setExecuteSQL] = useState(false);\n  // const [sqlQuery, setSQLQuery] = useState(null);\n  const [isSQLResponse, setIsSQLResponse] = useState(false);\n  const [data, setData] = useState('');\n\n\n  useLayoutEffect(() => {\n    if (endOfMessagesRef.current) {\n      endOfMessagesRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [chatLog]);\n\n  const handleGraphClick = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleModalClose = () => {\n    setIsModalVisible(false);\n  };\n  // Handle session end due to inactivity\n  const handleSessionEnd = () => {\n    setSessionActive(false);\n    setChatLog([...chatLog, { role: 'assistant', content: 'Session has ended due to inactivity.' }]);\n    setOpenPopup(true); // Show the popup\n  };\n\n  // const handleShowSQLChange = (event) => {\n  //   setShowSQL(event.target.checked);\n  // };\n\n  // Start or reset the inactivity timer\n  const resetInactivityTimeout = () => {\n    if (inactivityTimeoutRef.current) {\n      clearTimeout(inactivityTimeoutRef.current);\n    }\n\n    inactivityTimeoutRef.current = setTimeout(() => {\n      handleSessionEnd(); // End session after 30 minutes of inactivity\n    }, INACTIVITY_TIME);\n  };\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    // Prevent empty messages\n    if (!input.trim()) return;\n    if (!appCd.trim() || !requestId.trim()) {\n      setError('Please provide valid app_cd and request_id.');\n      return;\n    }\n\n    const newMessage = {\n      role: 'user',\n      content: input,\n    };\n\n    const newChatLog = [...chatLog, newMessage]; // Add user's message to chat log\n    setChatLog(newChatLog);\n    setInput(''); // Clear the input field\n    setIsLoading(true); // Set loading state\n    setError(''); // Clear any previous error\n    setShowInitialView(false);\n\n\n\n    try {\n      // Dynamic API URL based on user inputs\n      const response = await fetch(\n        `http://localhost:8000/get_llm_response/?app_cd=Chat_bot&request_id=8000`,\n        {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify([newMessage]),\n        }\n      );\n\n      // Check if response is okay\n      if (!response.ok) {\n        let errorMessage = '';\n\n        // Handle different status codes\n        if (response.status === 404) {\n          errorMessage = '404 - Not Found';\n        } else if (response.status === 500) {\n          errorMessage = '500 - Internal Server Error';\n        } else {\n          errorMessage = `${response.status} - ${response.statusText}`;\n        }\n\n        // // Display the image and error message\n        const botMessage = {\n          role: 'assistant',\n          content: (\n            <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n              <p style={{ fontSize: '18px', fontWeight: 'bold', textAlign: 'center' }}>{errorMessage}</p>\n            </div>\n          ),\n        };\n\n        setChatLog([...newChatLog, botMessage]); // Update chat log with assistant's error message\n        throw new Error(errorMessage); // Re-throw the error for logging purposes\n      }\n\n      const data = await response.json();\n      setApiResponse(data);\n\n      // Function to convert object to string (if needed)\n      const convertToString = (input) => {\n        if (typeof input === 'string') {\n          return input;\n        } else if (Array.isArray(input)) {\n          // Recursively convert array items\n          return input.map(convertToString).join(', ');\n        } else if (typeof input === 'object' && input !== null) {\n          // Convert key-value pairs\n          return Object.entries(input)\n            .map(([key, value]) => `${key}: ${convertToString(value)}`)\n            .join(', ');\n        }\n        return String(input);\n      };\n\n      // Determine how to handle the response\n      let modelReply = 'No valid reply found.'; // Default message\n      if (data.modelreply) {\n        // Check if the response is a JSON array of objects\n        if (Array.isArray(data.modelreply) && data.modelreply.every(item => typeof item === 'object')) {\n          const columnCount = Object.keys(data.modelreply[0]).length;\n          const rowCount = data.modelreply.length;\n          // Convert to table-like format with borders for display\n          modelReply = (\n            <div style={{ display: 'flex', alignItems: 'start' }}>\n              <table style={{ borderCollapse: 'collapse', width: '100%' }}>\n                <thead>\n                  <tr>\n                    {Object.keys(data.modelreply[0]).map((key) => (\n                      <th key={key} style={{ border: '1px solid black', padding: '8px', textAlign: 'left' }}>{key}</th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {data.modelreply.map((row, rowIndex) => (\n                    <tr key={rowIndex}>\n                      {Object.values(row).map((val, colIndex) => (\n                        <td key={colIndex} style={{ border: '1px solid black', padding: '8px' }}>{convertToString(val)}</td>\n                      ))}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              {(rowCount > 1 && columnCount > 1) && (\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  startIcon={<BarChartIcon />}\n                  sx={{ display: 'flex', alignItems: 'center', padding: '8px 16px', marginLeft: '15px', width: '190px', fontSize: '10px', fontWeight: 'bold' }}\n                  onClick={handleGraphClick}\n                >\n                  Graph View\n                </Button>\n              )}\n            </div>\n          );\n        } else if (typeof data.modelreply === 'string') {\n          // If it's a string, display it as text and store it in the state\n          if (data.modelreply.toLowerCase().includes('select')) {\n            modelReply = sqlFormatter(data.modelreply); // Format the SQL query\n          } else {\n            modelReply = data.modelreply;\n          }\n          setStoredResponse(data.modelreply);\n          setShowButton(true);\n        } else {\n          // Otherwise, convert to string\n          modelReply = convertToString(data.modelreply);\n        }\n      }\n      isSQLResponse = data.modelreply.toLowerCase().includes('select');\n      const botMessage = {\n        role: 'assistant',\n        content: modelReply,\n        isSQLResponse, // Attach this flag to the bot message\n      };\n\n      setChatLog([...newChatLog, botMessage]); // Update chat log with assistant's message\n    } catch (err) {\n      let fallbackErrorMessage = 'Error communicating with backend.';\n      const errorMessage = {\n        role: 'assistant',\n        content: (\n          <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n            <p style={{ fontSize: '18px', fontWeight: 'bold', textAlign: 'center' }}>{fallbackErrorMessage}</p>\n          </div>\n        ),\n      };\n\n      setChatLog([...newChatLog, errorMessage]);\n      setError('Error communicating with backend');\n      console.error('Error:', err);\n    } finally {\n      setIsLoading(false); // Set loading state to false\n      setShowSQL(false);\n    }\n  }\n\n  const handleInputFocusOrChange = () => {\n    setShowInitialView(false);\n    resetInactivityTimeout();\n  };\n\n  useEffect(() => {\n    resetInactivityTimeout();\n    return () => {\n      if (inactivityTimeoutRef.current) clearTimeout(inactivityTimeoutRef.current);\n    };\n  }, []);\n\n  const handleButtonClick = async () => {\n    try {\n      const encodedResponse = encodeURIComponent(storedResponse); // Encode the storedResponse\n      const response = await fetch(`http://localhost:8000/run_sql_query/?exec_query=${encodedResponse}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Check if response is okay\n      if (!response.ok) {\n        let errorMessage = '';\n\n        // Handle different status codes\n        if (response.status === 404) {\n          errorMessage = '404 - Not Found';\n        } else if (response.status === 500) {\n          errorMessage = '500 - Internal Server Error';\n        } else {\n          errorMessage = `${response.status} - ${response.statusText}`;\n        }\n\n        // Create an error message object\n        const errorMessageContent = {\n          role: 'assistant',\n          content: (\n            <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n              <p style={{ fontSize: '18px', fontWeight: 'bold', textAlign: 'center' }}>{errorMessage}</p>\n            </div>\n          ),\n        };\n\n        setChatLog((prevChatLog) => [...prevChatLog, errorMessageContent]); // Update chat log with assistant's error message\n        throw new Error(errorMessage); // Re-throw the error for logging purposes\n      }\n\n      const data = await response.json();\n      setData(data);\n\n      // Function to convert object to string\n      const convertToString = (input) => {\n        if (typeof input === 'string') {\n          return input;\n        } else if (Array.isArray(input)) {\n          return input.map(convertToString).join(', ');\n        } else if (typeof input === 'object' && input !== null) {\n          return Object.entries(input)\n            .map(([key, value]) => `${key}: ${convertToString(value)}`)\n            .join(', ');\n        }\n        return String(input);\n      };\n\n      // Handle the response data similarly to handleSubmit\n      let modelReply = 'No valid reply found.'; // Default message\n      if (data) {\n        // Check if the response is a JSON array of objects\n        if (Array.isArray(data) && data.every(item => typeof item === 'object')) {\n          const columnCount = Object.keys(data[0]).length;\n          const rowCount = data.length;\n\n          // Convert to a table-like format with borders for display\n          modelReply = (\n            <div style={{ display: 'flex', alignItems: 'start' }}>\n              <table style={{ borderCollapse: 'collapse', width: '100%' }}>\n                <thead>\n                  <tr>\n                    {Object.keys(data[0]).map((key) => (\n                      <th key={key} style={{ border: '1px solid black', padding: '8px', textAlign: 'left' }}>{key}</th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {data.map((row, rowIndex) => (\n                    <tr key={rowIndex}>\n                      {Object.values(row).map((val, colIndex) => (\n                        <td key={colIndex} style={{ border: '1px solid black', padding: '8px' }}>{convertToString(val)}</td>\n                      ))}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              {(rowCount > 1 && columnCount > 1) && (\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  startIcon={<BarChartIcon />}\n                  sx={{ display: 'flex', alignItems: 'center', padding: '8px 16px', marginLeft: '15px', width: '190px', fontSize: '10px', fontWeight: 'bold' }}\n                  onClick={handleGraphClick}\n                >\n                  Graph View\n                </Button>\n              )}\n            </div>\n          );\n        } else if (typeof data === 'string') {\n          // If it's a string, display it as text and store it in the state\n          modelReply = data;\n          //setStoredResponse(data);\n          setIsLoading(true);\n        } else {\n          // Otherwise, convert to string\n          modelReply = convertToString(data);\n        }\n      }\n\n      const botMessage = {\n        role: 'assistant',\n        content: modelReply,\n      };\n\n      setChatLog((prevChatLog) => [...prevChatLog, botMessage]); // Update chat log with assistant's message\n    } catch (err) {\n      // Handle network errors or other unexpected issues\n      const fallbackErrorMessage = 'Error communicating with backend.';\n      const errorMessageContent = {\n        role: 'assistant',\n        content: (\n          <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n            <p style={{ fontSize: '18px', fontWeight: 'bold', textAlign: 'center' }}>{fallbackErrorMessage}</p>\n          </div>\n        ),\n      };\n\n      setChatLog((prevChatLog) => [...prevChatLog, errorMessageContent]); // Update chat log with assistant's error message\n      console.error('Error:', err); // Log the error for debugging\n    } finally {\n      setIsLoading(false);// Set loading state to false\n    }\n  };\n\n  return (\n\n    <Box sx={{\n      display: 'flex',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      width: layoutWidth,\n      flexDirection: 'column',\n      margin: 'auto', ...customStyles.container\n    }}>\n\n      {showInitialView && (\n        <>\n          <div\n            style={{\n              width: '40px',\n              height: 'auto',\n              overflow: 'hidden',\n              marginRight: 2,\n            }}\n          >\n            <img\n              src={chatbotImage}\n              alt=\"Chatbot\"\n              style={{\n                width: '100%',\n                height: '100%',\n                objectFit: 'contain',\n              }}\n            />\n          </div>\n          <Box\n            component=\"p\"\n            sx={{\n              marginTop: '10px',\n              fontSize: '16.5px',\n              fontWeight: 600,\n              color: themeColor,\n              textAlign: 'center',\n              marginBottom: '19%',\n              ...customStyles.initialPrompt\n            }}\n          >\n            {chatInitialMessage}\n\n          </Box>\n\n        </>\n      )}\n\n      <Box sx={{\n        flex: 1,\n        width: '100%',\n        overflowY: 'auto',\n        maxHeight: '73vh',\n        padding: '10px', ...customStyles.chatContainer\n      }}>\n        {/* {apiResponse && (\n        <>\n          <FormControlLabel\n            control={<Checkbox checked={showSQL} onChange={handleShowSQLChange} />}\n            label=\"Show SQL\"\n          />\n          <FormControlLabel\n            control={<Checkbox checked={executeSQL} onChange={handleExecuteSQLChange} />}\n            label=\"Execute SQL\"\n          />\n        </>\n      )} */}\n        <ChatMessage chatLog={chatLog} chatbotImage={chatbotImage} userImage={userImage} />\n        {showButton && (\n          <FormControlLabel\n            control={<Checkbox checked={executeSQL} onChange={handleButtonClick} />}\n            label=\"Execute SQL\"\n          />\n        )}\n        <div ref={endOfMessagesRef} />\n        {isLoading && <HashLoader color={themeColor} size={30} aria-label=\"Loading Spinner\" data-testid=\"loader\" />}\n        {/* {responseReceived && <Feedback />} */}\n        {successMessage && <Alert color=\"success\"><span>{successMessage}</span></Alert>}\n      </Box>\n\n      <Box sx={{\n        display: 'flex',\n        justifyContent: 'center',\n        width: '100%',\n        maxWidth: '100%',\n        flexDirection: 'column', ...customStyles.inputContainer\n      }}>\n        <Grid container spacing={2} sx={{ width: '100%', maxWidth: '100%', position: 'fixed', bottom: '50px', left: '67%', transform: 'translateX(-50%)', width: '70%', marginLeft: '8px', flexDirection: 'column' }}>\n          <Grid item xs={12} sm={6}>\n            <form onSubmit={handleSubmit} style={{ width: '100%', backgroundColor: '#fff', boxShadow: '0px -2px 5px rgba(0, 0, 0, 0.1)', ...customStyles.form }}>\n              <TextField\n                fullWidth\n                placeholder=\"What can I help you with...\"\n                value={input}\n                onChange={(e) => {\n                  setInput(e.target.value);\n                  handleInputFocusOrChange(); // Ensure elements disappear when typing\n                }}\n                onFocus={handleInputFocusOrChange}\n                inputProps={{ maxLength: 400 }}\n                InputProps={{\n                  sx: {\n                    '& .MuiInputBase-input': {\n                      padding: '12px',\n                      fontSize: '13px',\n                      fontWeight: 'bold',\n                      color: themeColor,\n                    },\n                    '& .MuiInputAdornment-root button': {\n                      color: themeColor,\n                    },\n                  },\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton type=\"submit\">\n                        <FaTelegramPlane className=\"h-6 w-6\" color={themeColor} />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </form>\n\n          </Grid>\n        </Grid>\n      </Box>\n      <ChartModal\n        visible={isModalVisible}\n        onClose={handleModalClose}\n        chartData={data || []}  // Ensure you pass valid JSON data\n      />\n      <Modal open={openPopup}\n        onClose={(event, reason) => {\n          if (reason !== \"backdropClick\") {\n            setOpenPopup(false);\n          }\n        }}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}>\n        <Fade in={openPopup}>\n          <Box sx={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            width: 300,\n            bgcolor: 'background.paper',\n            borderRadius: '8px',\n            boxShadow: 24,\n            p: 4,\n            textAlign: 'center',\n          }}>\n            <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>Session Ended</Typography>\n            <Typography sx={{ mt: 2 }}>Your session has ended due to 10 minutes of inactivity.</Typography>\n            {/* New Chat Button */}\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => {\n                setOpenPopup(false);  // Close modal\n                handleNewChat(); // Start new chat\n              }}\n              sx={{ mt: 2 }}\n            >\n              New Chat\n            </Button>\n          </Box>\n        </Fade>\n      </Modal>\n    </Box>\n  );\n};\n\nexport default UserChat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}