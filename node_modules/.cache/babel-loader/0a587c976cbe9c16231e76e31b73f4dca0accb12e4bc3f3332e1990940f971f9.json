{"ast":null,"code":"var _jsxFileName = \"/Users/apurupachintala/Documents/GitHub/chat-plugin-test/src/components/UserChat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useLayoutEffect, useEffect } from 'react';\nimport { Alert } from 'flowbite-react';\nimport { FaTelegramPlane } from 'react-icons/fa';\nimport HashLoader from 'react-spinners/HashLoader';\nimport ChatMessage from './ChatMessage';\nimport { Box, Grid, TextField, Button, IconButton, Typography, InputAdornment, Toolbar, useTheme, useMediaQuery, Modal, Backdrop, Fade, FormControlLabel, Checkbox } from '@mui/material';\nimport ChartModal from './ChartModal';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport { format as sqlFormatter } from 'sql-formatter';\nimport hljs from 'highlight.js/lib/core';\nimport sql from 'highlight.js/lib/languages/sql';\nimport SuggestedPrompts from '../components/SuggestedPrompts';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nhljs.registerLanguage('sql', sql);\nfunction UserChat(props) {\n  _s();\n  const theme = useTheme();\n  const isSmallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n  const isMediumScreen = useMediaQuery(theme.breakpoints.between('sm', 'md'));\n  const {\n    chatLog,\n    setChatLog,\n    themeColor,\n    responseReceived,\n    setResponseReceived,\n    error,\n    setError,\n    chatInitialMessage,\n    isLoading,\n    setIsLoading,\n    successMessage,\n    setSuccessMessage,\n    showInitialView,\n    setShowInitialView,\n    requestId,\n    setRequestId,\n    apiPath,\n    sqlUrl,\n    appCd,\n    customStyles = {},\n    chatbotImage,\n    userImage,\n    handleNewChat,\n    suggestedPrompts,\n    showButton,\n    setShowButton,\n    showExecuteButton,\n    setShowExecuteButton\n  } = props;\n  const endOfMessagesRef = useRef(null);\n  const [apiResponse, setApiResponse] = useState(null); // New state for storing API response\n  const [input, setInput] = useState('');\n  const layoutWidth = isSmallScreen ? '100%' : isMediumScreen ? '80%' : '70%';\n  const inactivityTimeoutRef = useRef(null); // Ref for the inactivity timeout\n  const [sessionActive, setSessionActive] = useState(true); // State to track session activity\n  const [openPopup, setOpenPopup] = useState(false);\n  const INACTIVITY_TIME = 10 * 60 * 1000;\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [storedResponse, setStoredResponse] = useState(''); // New state to store the response\n  const [showResponse, setShowResponse] = useState(false);\n  const [data, setData] = useState('');\n  const [rawResponse, setRawResponse] = useState('');\n  useLayoutEffect(() => {\n    if (endOfMessagesRef.current) {\n      endOfMessagesRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [chatLog]);\n  const handleGraphClick = () => {\n    setIsModalVisible(true);\n  };\n  const handleModalClose = () => {\n    setIsModalVisible(false);\n  };\n  // Handle session end due to inactivity\n  const handleSessionEnd = () => {\n    setSessionActive(false);\n    setChatLog([...chatLog, {\n      role: 'assistant',\n      content: 'Session has ended due to inactivity.'\n    }]);\n    setOpenPopup(true); // Show the popup\n  };\n\n  // Start or reset the inactivity timer\n  const resetInactivityTimeout = () => {\n    if (inactivityTimeoutRef.current) {\n      clearTimeout(inactivityTimeoutRef.current);\n    }\n    inactivityTimeoutRef.current = setTimeout(() => {\n      handleSessionEnd(); // End session after 30 minutes of inactivity\n    }, INACTIVITY_TIME);\n  };\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    // Prevent empty messages\n    if (!input.trim()) return;\n    if (!appCd.trim() || !requestId.trim()) {\n      setError('Please provide valid app_cd and request_id.');\n      return;\n    }\n    const newMessage = {\n      role: 'user',\n      content: input\n    };\n    const newChatLog = [...chatLog, newMessage]; // Add user's message to chat log\n    setChatLog(newChatLog);\n    setInput(''); // Clear the input field\n    setIsLoading(true); // Set loading state\n    setError(''); // Clear any previous error\n    setShowInitialView(false);\n    setShowResponse(false);\n    setShowButton(false);\n    setShowExecuteButton(false);\n    try {\n      // Dynamic API URL based on user inputs\n      const url = `${apiPath}?app_cd=${appCd}&request_id=${requestId}`;\n      const response = await fetch(url, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify([newMessage])\n      });\n\n      // Check if response is okay\n      if (!response.ok) {\n        let errorMessage = '';\n\n        // Handle different status codes\n        if (response.status === 404) {\n          errorMessage = '404 - Not Found';\n        } else if (response.status === 500) {\n          errorMessage = '500 - Internal Server Error';\n        } else {\n          errorMessage = `${response.status} - ${response.statusText}`;\n        }\n\n        // // Display the image and error message\n        const botMessage = {\n          role: 'assistant',\n          content: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              flexDirection: 'column'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                fontSize: '18px',\n                fontWeight: 'bold',\n                textAlign: 'center'\n              },\n              children: errorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)\n        };\n        setChatLog([...newChatLog, botMessage]); // Update chat log with assistant's error message\n        throw new Error(errorMessage); // Re-throw the error for logging purposes\n      }\n      const data = await response.json();\n      setApiResponse(data);\n\n      // Function to convert object to string (if needed)\n      const convertToString = input => {\n        if (typeof input === 'string') {\n          return input;\n        } else if (Array.isArray(input)) {\n          // Recursively convert array items\n          return input.map(convertToString).join(', ');\n        } else if (typeof input === 'object' && input !== null) {\n          // Convert key-value pairs\n          return Object.entries(input).map(([key, value]) => `${key}: ${convertToString(value)}`).join(', ');\n        }\n        return String(input);\n      };\n\n      // Determine how to handle the response\n      let isSQLResponse = false;\n      let modelReply = 'No valid reply found.'; // Default message\n      if (data.modelreply) {\n        // Check if the response is a JSON array of objects\n        if (Array.isArray(data.modelreply) && data.modelreply.every(item => typeof item === 'object')) {\n          const columnCount = Object.keys(data.modelreply[0]).length;\n          const rowCount = data.modelreply.length;\n          // Convert to table-like format with borders for display\n          modelReply = /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'start'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"table\", {\n              style: {\n                borderCollapse: 'collapse',\n                width: '100%'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: Object.keys(data.modelreply[0]).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n                    style: {\n                      border: '1px solid black',\n                      padding: '8px',\n                      textAlign: 'left'\n                    },\n                    children: key\n                  }, key, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 177,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: data.modelreply.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: Object.values(row).map((val, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n                    style: {\n                      border: '1px solid black',\n                      padding: '8px'\n                    },\n                    children: convertToString(val)\n                  }, colIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 185,\n                    columnNumber: 25\n                  }, this))\n                }, rowIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 15\n            }, this), rowCount > 1 && columnCount > 1 && /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              startIcon: /*#__PURE__*/_jsxDEV(BarChartIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 30\n              }, this),\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                padding: '8px 16px',\n                marginLeft: '15px',\n                width: '190px',\n                fontSize: '10px',\n                fontWeight: 'bold'\n              },\n              onClick: handleGraphClick,\n              children: \"Graph View\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this);\n        } else if (typeof data.modelreply === 'string') {\n          const sqlRegex = /```sql([\\s\\S]*?)```/g;\n          const parts = [];\n          let lastIndex = 0;\n          let match;\n\n          // Split the response into SQL and text\n          while ((match = sqlRegex.exec(data.modelreply)) !== null) {\n            // Add the text before the SQL block\n            if (match.index > lastIndex) {\n              parts.push(/*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  margin: \"8px 0\"\n                },\n                children: data.modelreply.slice(lastIndex, match.index).trim()\n              }, `text-${lastIndex}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 17\n              }, this));\n            }\n\n            // Format the SQL block\n            const sqlContent = match[1].trim();\n            try {\n              parts.push(/*#__PURE__*/_jsxDEV(\"pre\", {\n                style: {\n                  margin: '8px 0'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"code\", {\n                  style: {\n                    whiteSpace: 'pre-wrap',\n                    wordBreak: 'break-word'\n                  },\n                  children: sqlFormatter(sqlContent)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 226,\n                  columnNumber: 19\n                }, this)\n              }, `sql-${match.index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 17\n              }, this));\n            } catch (err) {\n              console.error(\"SQL Formatting Error:\", err);\n              parts.push(/*#__PURE__*/_jsxDEV(\"pre\", {\n                style: {\n                  margin: '8px 0',\n                  color: 'red'\n                },\n                children: sqlContent\n              }, `sql-${match.index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 17\n              }, this));\n            }\n            lastIndex = sqlRegex.lastIndex;\n          }\n          // if (lastIndex < data.modelreply.length) {\n          //   parts.push(\n          //     <p key={`text-${lastIndex}`} style={{ margin: \"8px 0\" }}>\n          //       {data.modelreply.slice(lastIndex).trim()}\n          //     </p>\n          //   );\n          // }\n\n          if (lastIndex < data.modelreply.length) {\n            const remainingContent = data.modelreply.slice(lastIndex).trim();\n            if (/SELECT|WHERE|FROM/i.test(remainingContent)) {\n              // Treat remaining content as SQL\n              try {\n                parts.push(/*#__PURE__*/_jsxDEV(\"pre\", {\n                  style: {\n                    margin: '8px 0'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"code\", {\n                    style: {\n                      whiteSpace: 'pre-wrap',\n                      wordBreak: 'break-word'\n                    },\n                    children: sqlFormatter(remainingContent)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 257,\n                    columnNumber: 21\n                  }, this)\n                }, `sql-remaining`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 256,\n                  columnNumber: 19\n                }, this));\n              } catch (err) {\n                console.error(\"SQL Formatting Error:\", err);\n                parts.push(/*#__PURE__*/_jsxDEV(\"pre\", {\n                  style: {\n                    margin: '8px 0',\n                    color: 'red'\n                  },\n                  children: remainingContent\n                }, `sql-remaining`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 265,\n                  columnNumber: 19\n                }, this));\n              }\n            } else {\n              // Add remaining text as-is\n              parts.push(/*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  margin: \"8px 0\"\n                },\n                children: remainingContent\n              }, `text-${lastIndex}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 17\n              }, this));\n            }\n          }\n          modelReply = /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              overflow: \"auto\",\n              maxWidth: \"100%\",\n              padding: \"10px\"\n            },\n            children: parts\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 13\n          }, this);\n          const raw = data.modelreply;\n          setRawResponse(raw);\n          setStoredResponse(modelReply);\n          // setStoredResponse(modelReply);\n          setShowButton(true); // Show \"Show SQL\" button\n          setShowExecuteButton(true); // Show \"Execute SQL\" button\n        } else {\n          // Otherwise, convert to string\n          modelReply = convertToString(data.modelreply);\n          const botMessage = {\n            role: 'assistant',\n            content: modelReply,\n            isSQLResponse\n          };\n          setChatLog([...newChatLog, botMessage]);\n        }\n      }\n    } catch (err) {\n      let fallbackErrorMessage = 'Error communicating with backend.';\n      const errorMessage = {\n        role: 'assistant',\n        content: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            flexDirection: 'column'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontSize: '18px',\n              fontWeight: 'bold',\n              textAlign: 'center'\n            },\n            children: fallbackErrorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this)\n      };\n      setChatLog([...newChatLog, errorMessage]);\n      setError('Error communicating with backend');\n      console.error('Error:', err);\n    } finally {\n      setIsLoading(false); // Set loading state to false\n    }\n  }\n  const handleInputFocusOrChange = () => {\n    setShowInitialView(false);\n    resetInactivityTimeout();\n  };\n  useEffect(() => {\n    resetInactivityTimeout();\n    return () => {\n      if (inactivityTimeoutRef.current) clearTimeout(inactivityTimeoutRef.current);\n    };\n  }, []);\n  const handleButtonClick = async () => {\n    try {\n      const cleanAndSanitizeResponse = response => {\n        if (typeof response !== 'string') {\n          response = JSON.stringify(response); // Ensure response is a string\n        }\n        let cleanedResponse = response.replace(/\\\\n/g, ' ') // Replace line breaks with spaces\n        .replace(/\\s+/g, ' ') // Collapse multiple spaces into a single space\n        .replace(/--.*?;/g, '') // Remove SQL comments starting with --\n        .trim(); // Trim leading and trailing spaces\n        return encodeURIComponent(cleanedResponse); // Encode for URL safety\n      };\n      const sanitizedResponse = cleanAndSanitizeResponse(storedResponse);\n      const encodeResponse = JSON.stringify(sanitizedResponse);\n      const sqlQueryUrl = `${sqlUrl}?app_cd=${appCd}&request_id=${requestId}&exec_query=${encodeResponse}`;\n      const response = await fetch(sqlQueryUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Check if response is okay\n      if (!response.ok) {\n        let errorMessage = '';\n\n        // Handle different status codes\n        if (response.status === 404) {\n          errorMessage = '404 - Not Found';\n        } else if (response.status === 500) {\n          errorMessage = '500 - Internal Server Error';\n        } else {\n          errorMessage = `${response.status} - ${response.statusText}`;\n        }\n\n        // Create an error message object\n        const errorMessageContent = {\n          role: 'assistant',\n          content: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              flexDirection: 'column'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                fontSize: '18px',\n                fontWeight: 'bold',\n                textAlign: 'center'\n              },\n              children: errorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this)\n        };\n        setChatLog(prevChatLog => [...prevChatLog, errorMessageContent]); // Update chat log with assistant's error message\n        throw new Error(errorMessage); // Re-throw the error for logging purposes\n      }\n      const data = await response.json();\n      setData(data);\n\n      // Function to convert object to string\n      const convertToString = input => {\n        if (typeof input === 'string') {\n          return input;\n        } else if (Array.isArray(input)) {\n          return input.map(convertToString).join(', ');\n        } else if (typeof input === 'object' && input !== null) {\n          return Object.entries(input).map(([key, value]) => `${key}: ${convertToString(value)}`).join(', ');\n        }\n        return String(input);\n      };\n\n      // Handle the response data similarly to handleSubmit\n      let modelReply = 'No valid reply found.'; // Default message\n      if (data) {\n        // Check if the response is a JSON array of objects\n        if (Array.isArray(data) && data.every(item => typeof item === 'object')) {\n          const columnCount = Object.keys(data[0]).length;\n          const rowCount = data.length;\n\n          // Convert to a table-like format with borders for display\n          modelReply = /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'start'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"table\", {\n              style: {\n                borderCollapse: 'collapse',\n                width: '100%'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: Object.keys(data[0]).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n                    style: {\n                      border: '1px solid black',\n                      padding: '8px',\n                      textAlign: 'left'\n                    },\n                    children: key\n                  }, key, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 413,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 411,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: data.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: Object.values(row).map((val, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n                    style: {\n                      border: '1px solid black',\n                      padding: '8px'\n                    },\n                    children: convertToString(val)\n                  }, colIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 421,\n                    columnNumber: 25\n                  }, this))\n                }, rowIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 419,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 15\n            }, this), rowCount > 1 && columnCount > 1 && /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              startIcon: /*#__PURE__*/_jsxDEV(BarChartIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 30\n              }, this),\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                padding: '8px 16px',\n                marginLeft: '15px',\n                width: '190px',\n                fontSize: '10px',\n                fontWeight: 'bold'\n              },\n              onClick: handleGraphClick,\n              children: \"Graph View\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 13\n          }, this);\n        } else if (typeof data === 'string') {\n          // If it's a string, display it as text and store it in the state\n          modelReply = data;\n          //setStoredResponse(data);\n          setIsLoading(true);\n        } else {\n          // Otherwise, convert to string\n          modelReply = convertToString(data);\n        }\n      }\n      const botMessage = {\n        role: 'assistant',\n        content: modelReply\n      };\n      setChatLog(prevChatLog => [...prevChatLog, botMessage]); // Update chat log with assistant's message\n    } catch (err) {\n      // Handle network errors or other unexpected issues\n      const fallbackErrorMessage = 'Error communicating with backend.';\n      const errorMessageContent = {\n        role: 'assistant',\n        content: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            flexDirection: 'column'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontSize: '18px',\n              fontWeight: 'bold',\n              textAlign: 'center'\n            },\n            children: fallbackErrorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 11\n        }, this)\n      };\n      setChatLog(prevChatLog => [...prevChatLog, errorMessageContent]); // Update chat log with assistant's error message\n      console.error('Error:', err); // Log the error for debugging\n    } finally {\n      setIsLoading(false); // Set loading state to false\n      setShowExecuteButton(false);\n      setShowButton(false);\n    }\n  };\n  function handleShowResponse() {\n    setShowResponse(prev => {\n      const newVisibility = !prev; // Toggle SQL response visibilit\n      if (newVisibility) {\n        const botMessage = {\n          role: 'assistant',\n          content: storedResponse\n        };\n        setChatLog(prevChatLog => [...prevChatLog, botMessage]);\n      } else {\n        setChatLog(prevChatLog => {\n          if (prevChatLog.length > 0 && prevChatLog[prevChatLog.length - 1].role === 'assistant') {\n            return prevChatLog.slice(0, prevChatLog.length - 1);\n          }\n          return prevChatLog;\n        });\n      }\n      return newVisibility;\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      width: layoutWidth,\n      flexDirection: 'column',\n      margin: 'auto',\n      ...customStyles.container\n    },\n    children: [showInitialView && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '40px',\n          height: 'auto',\n          overflow: 'hidden',\n          marginRight: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: chatbotImage,\n          alt: \"Chatbot\",\n          style: {\n            width: '100%',\n            height: '100%',\n            objectFit: 'contain'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        component: \"p\",\n        sx: {\n          marginTop: '10px',\n          fontSize: '16.5px',\n          fontWeight: 600,\n          color: themeColor,\n          textAlign: 'center',\n          marginBottom: '19%',\n          ...customStyles.initialPrompt\n        },\n        children: chatInitialMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flex: 1,\n        width: '100%',\n        overflowY: 'auto',\n        maxHeight: '73vh',\n        padding: '10px',\n        ...customStyles.chatContainer\n      },\n      children: [/*#__PURE__*/_jsxDEV(ChatMessage, {\n        chatLog: chatLog,\n        chatbotImage: chatbotImage,\n        userImage: userImage,\n        storedResponse: storedResponse,\n        showResponse: showResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: endOfMessagesRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 9\n      }, this), showButton && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Please see the details below\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: handleShowResponse,\n          sx: {\n            mr: 2\n          },\n          children: showResponse ? \"Hide SQL\" : \"Show SQL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 66\n        }, this)]\n      }, void 0, true), showExecuteButton && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleButtonClick,\n        children: \"Execute SQL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 11\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(HashLoader, {\n        color: themeColor,\n        size: 30,\n        \"aria-label\": \"Loading Spinner\",\n        \"data-testid\": \"loader\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 23\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(Alert, {\n        color: \"success\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: successMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 51\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        width: '100%',\n        maxWidth: '100%',\n        flexDirection: 'column',\n        ...customStyles.inputContainer\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        sx: {\n          width: '100%',\n          maxWidth: '100%',\n          position: 'fixed',\n          bottom: '50px',\n          left: '67%',\n          transform: 'translateX(-50%)',\n          width: '70%',\n          marginLeft: '8px',\n          flexDirection: 'column'\n        },\n        children: [showInitialView && /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          children: /*#__PURE__*/_jsxDEV(SuggestedPrompts, {\n            prompts: suggestedPrompts,\n            sx: {\n              mb: isSmallScreen || isMediumScreen ? '32px' : '24px',\n              textAlign: 'center',\n              width: '100%',\n              maxWidth: '600px',\n              marginLeft: 'auto',\n              marginRight: 'auto'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            style: {\n              width: '100%',\n              backgroundColor: '#fff',\n              boxShadow: '0px -2px 5px rgba(0, 0, 0, 0.1)',\n              ...customStyles.form\n            },\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              placeholder: \"What can I help you with...\",\n              value: input,\n              onChange: e => {\n                setInput(e.target.value);\n                handleInputFocusOrChange(); // Ensure elements disappear when typing\n              },\n              onFocus: handleInputFocusOrChange,\n              inputProps: {\n                maxLength: 400\n              },\n              InputProps: {\n                sx: {\n                  '& .MuiInputBase-input': {\n                    padding: '12px',\n                    fontSize: '13px',\n                    fontWeight: 'bold',\n                    color: themeColor\n                  },\n                  '& .MuiInputAdornment-root button': {\n                    color: themeColor\n                  }\n                },\n                endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                  position: \"end\",\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    type: \"submit\",\n                    children: /*#__PURE__*/_jsxDEV(FaTelegramPlane, {\n                      className: \"h-6 w-6\",\n                      color: themeColor\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 627,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 626,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 625,\n                  columnNumber: 21\n                }, this)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 602,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 577,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChartModal, {\n      visible: isModalVisible,\n      onClose: handleModalClose,\n      chartData: data || [] // Ensure you pass valid JSON data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 638,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: openPopup,\n      onClose: (event, reason) => {\n        if (reason !== \"backdropClick\") {\n          setOpenPopup(false);\n        }\n      },\n      closeAfterTransition: true,\n      BackdropComponent: Backdrop,\n      BackdropProps: {\n        timeout: 500\n      },\n      children: /*#__PURE__*/_jsxDEV(Fade, {\n        in: openPopup,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            width: 300,\n            bgcolor: 'background.paper',\n            borderRadius: '8px',\n            boxShadow: 24,\n            p: 4,\n            textAlign: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            sx: {\n              fontWeight: 'bold'\n            },\n            children: \"Session Ended\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 667,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: {\n              mt: 2\n            },\n            children: \"Your session has ended due to 10 minutes of inactivity.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 668,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => {\n              setOpenPopup(false); // Close modal\n              handleNewChat(); // Start new chat\n            },\n            sx: {\n              mt: 2\n            },\n            children: \"New Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 670,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 654,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 504,\n    columnNumber: 5\n  }, this);\n}\n_s(UserChat, \"ClxYEDxxzofiO0gi4IrTyZXZpfc=\", false, function () {\n  return [useTheme, useMediaQuery, useMediaQuery];\n});\n_c = UserChat;\n;\nexport default UserChat;\nvar _c;\n$RefreshReg$(_c, \"UserChat\");","map":{"version":3,"names":["React","useState","useRef","useLayoutEffect","useEffect","Alert","FaTelegramPlane","HashLoader","ChatMessage","Box","Grid","TextField","Button","IconButton","Typography","InputAdornment","Toolbar","useTheme","useMediaQuery","Modal","Backdrop","Fade","FormControlLabel","Checkbox","ChartModal","BarChartIcon","format","sqlFormatter","hljs","sql","SuggestedPrompts","jsxDEV","_jsxDEV","Fragment","_Fragment","registerLanguage","UserChat","props","_s","theme","isSmallScreen","breakpoints","down","isMediumScreen","between","chatLog","setChatLog","themeColor","responseReceived","setResponseReceived","error","setError","chatInitialMessage","isLoading","setIsLoading","successMessage","setSuccessMessage","showInitialView","setShowInitialView","requestId","setRequestId","apiPath","sqlUrl","appCd","customStyles","chatbotImage","userImage","handleNewChat","suggestedPrompts","showButton","setShowButton","showExecuteButton","setShowExecuteButton","endOfMessagesRef","apiResponse","setApiResponse","input","setInput","layoutWidth","inactivityTimeoutRef","sessionActive","setSessionActive","openPopup","setOpenPopup","INACTIVITY_TIME","isModalVisible","setIsModalVisible","storedResponse","setStoredResponse","showResponse","setShowResponse","data","setData","rawResponse","setRawResponse","current","scrollIntoView","behavior","handleGraphClick","handleModalClose","handleSessionEnd","role","content","resetInactivityTimeout","clearTimeout","setTimeout","handleSubmit","e","preventDefault","trim","newMessage","newChatLog","url","response","fetch","method","headers","body","JSON","stringify","ok","errorMessage","status","statusText","botMessage","style","display","alignItems","flexDirection","children","fontSize","fontWeight","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","Error","json","convertToString","Array","isArray","map","join","Object","entries","key","value","String","isSQLResponse","modelReply","modelreply","every","item","columnCount","keys","length","rowCount","borderCollapse","width","border","padding","row","rowIndex","values","val","colIndex","variant","color","startIcon","sx","marginLeft","onClick","sqlRegex","parts","lastIndex","match","exec","index","push","margin","slice","sqlContent","whiteSpace","wordBreak","err","console","remainingContent","test","overflow","maxWidth","raw","fallbackErrorMessage","handleInputFocusOrChange","handleButtonClick","cleanAndSanitizeResponse","cleanedResponse","replace","encodeURIComponent","sanitizedResponse","encodeResponse","sqlQueryUrl","errorMessageContent","prevChatLog","handleShowResponse","prev","newVisibility","justifyContent","container","height","marginRight","src","alt","objectFit","component","marginTop","marginBottom","initialPrompt","flex","overflowY","maxHeight","chatContainer","ref","mr","size","inputContainer","spacing","position","bottom","left","transform","xs","sm","prompts","mb","onSubmit","backgroundColor","boxShadow","form","fullWidth","placeholder","onChange","target","onFocus","inputProps","maxLength","InputProps","endAdornment","type","className","visible","onClose","chartData","open","event","reason","closeAfterTransition","BackdropComponent","BackdropProps","timeout","in","top","bgcolor","borderRadius","p","mt","_c","$RefreshReg$"],"sources":["/Users/apurupachintala/Documents/GitHub/chat-plugin-test/src/components/UserChat.jsx"],"sourcesContent":["import React, { useState, useRef, useLayoutEffect, useEffect } from 'react';\nimport { Alert } from 'flowbite-react';\nimport { FaTelegramPlane } from 'react-icons/fa';\nimport HashLoader from 'react-spinners/HashLoader';\nimport ChatMessage from './ChatMessage';\nimport { Box, Grid, TextField, Button, IconButton, Typography, InputAdornment, Toolbar, useTheme, useMediaQuery, Modal, Backdrop, Fade, FormControlLabel, Checkbox } from '@mui/material';\nimport ChartModal from './ChartModal';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport { format as sqlFormatter } from 'sql-formatter';\nimport hljs from 'highlight.js/lib/core';\nimport sql from 'highlight.js/lib/languages/sql';\nimport SuggestedPrompts from '../components/SuggestedPrompts';\n\nhljs.registerLanguage('sql', sql);\nfunction UserChat(props) {\n  const theme = useTheme();\n  const isSmallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n  const isMediumScreen = useMediaQuery(theme.breakpoints.between('sm', 'md'));\n\n  const {\n    chatLog, setChatLog,\n    themeColor,\n    responseReceived, setResponseReceived,\n    error, setError,\n    chatInitialMessage,\n    isLoading, setIsLoading,\n    successMessage, setSuccessMessage,\n    showInitialView, setShowInitialView,\n    requestId, setRequestId, apiPath, sqlUrl, appCd, customStyles = {}, chatbotImage, userImage, handleNewChat, suggestedPrompts, showButton, setShowButton, showExecuteButton, setShowExecuteButton\n  } = props;\n\n  const endOfMessagesRef = useRef(null);\n  const [apiResponse, setApiResponse] = useState(null); // New state for storing API response\n  const [input, setInput] = useState('');\n  const layoutWidth = isSmallScreen ? '100%' : isMediumScreen ? '80%' : '70%';\n  const inactivityTimeoutRef = useRef(null); // Ref for the inactivity timeout\n  const [sessionActive, setSessionActive] = useState(true); // State to track session activity\n  const [openPopup, setOpenPopup] = useState(false);\n  const INACTIVITY_TIME = 10 * 60 * 1000;\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [storedResponse, setStoredResponse] = useState(''); // New state to store the response\n  const [showResponse, setShowResponse] = useState(false);\n  const [data, setData] = useState('');\n  const [rawResponse, setRawResponse] = useState('');\n\n  useLayoutEffect(() => {\n    if (endOfMessagesRef.current) {\n      endOfMessagesRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [chatLog]);\n\n  const handleGraphClick = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleModalClose = () => {\n    setIsModalVisible(false);\n  };\n  // Handle session end due to inactivity\n  const handleSessionEnd = () => {\n    setSessionActive(false);\n    setChatLog([...chatLog, { role: 'assistant', content: 'Session has ended due to inactivity.' }]);\n    setOpenPopup(true); // Show the popup\n  };\n\n  // Start or reset the inactivity timer\n  const resetInactivityTimeout = () => {\n    if (inactivityTimeoutRef.current) {\n      clearTimeout(inactivityTimeoutRef.current);\n    }\n\n    inactivityTimeoutRef.current = setTimeout(() => {\n      handleSessionEnd(); // End session after 30 minutes of inactivity\n    }, INACTIVITY_TIME);\n  };\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    // Prevent empty messages\n    if (!input.trim()) return;\n    if (!appCd.trim() || !requestId.trim()) {\n      setError('Please provide valid app_cd and request_id.');\n      return;\n    }\n\n    const newMessage = {\n      role: 'user',\n      content: input,\n    };\n\n    const newChatLog = [...chatLog, newMessage]; // Add user's message to chat log\n    setChatLog(newChatLog);\n    setInput(''); // Clear the input field\n    setIsLoading(true); // Set loading state\n    setError(''); // Clear any previous error\n    setShowInitialView(false);\n    setShowResponse(false);\n    setShowButton(false);\n    setShowExecuteButton(false);\n\n    try {\n      // Dynamic API URL based on user inputs\n      const url = `${apiPath}?app_cd=${appCd}&request_id=${requestId}`;\n      const response = await fetch(\n        url,\n        {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify([newMessage]),\n        }\n      );\n\n      // Check if response is okay\n      if (!response.ok) {\n        let errorMessage = '';\n\n        // Handle different status codes\n        if (response.status === 404) {\n          errorMessage = '404 - Not Found';\n        } else if (response.status === 500) {\n          errorMessage = '500 - Internal Server Error';\n        } else {\n          errorMessage = `${response.status} - ${response.statusText}`;\n        }\n\n        // // Display the image and error message\n        const botMessage = {\n          role: 'assistant',\n          content: (\n            <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n              <p style={{ fontSize: '18px', fontWeight: 'bold', textAlign: 'center' }}>{errorMessage}</p>\n            </div>\n          ),\n        };\n\n        setChatLog([...newChatLog, botMessage]); // Update chat log with assistant's error message\n        throw new Error(errorMessage); // Re-throw the error for logging purposes\n      }\n\n      const data = await response.json();\n      setApiResponse(data);\n\n      // Function to convert object to string (if needed)\n      const convertToString = (input) => {\n        if (typeof input === 'string') {\n          return input;\n        } else if (Array.isArray(input)) {\n          // Recursively convert array items\n          return input.map(convertToString).join(', ');\n        } else if (typeof input === 'object' && input !== null) {\n          // Convert key-value pairs\n          return Object.entries(input)\n            .map(([key, value]) => `${key}: ${convertToString(value)}`)\n            .join(', ');\n        }\n        return String(input);\n      };\n\n      // Determine how to handle the response\n      let isSQLResponse = false;\n      let modelReply = 'No valid reply found.'; // Default message\n      if (data.modelreply) {\n        // Check if the response is a JSON array of objects\n        if (Array.isArray(data.modelreply) && data.modelreply.every(item => typeof item === 'object')) {\n          const columnCount = Object.keys(data.modelreply[0]).length;\n          const rowCount = data.modelreply.length;\n          // Convert to table-like format with borders for display\n          modelReply = (\n            <div style={{ display: 'flex', alignItems: 'start' }}>\n              <table style={{ borderCollapse: 'collapse', width: '100%' }}>\n                <thead>\n                  <tr>\n                    {Object.keys(data.modelreply[0]).map((key) => (\n                      <th key={key} style={{ border: '1px solid black', padding: '8px', textAlign: 'left' }}>{key}</th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {data.modelreply.map((row, rowIndex) => (\n                    <tr key={rowIndex}>\n                      {Object.values(row).map((val, colIndex) => (\n                        <td key={colIndex} style={{ border: '1px solid black', padding: '8px' }}>{convertToString(val)}</td>\n                      ))}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              {(rowCount > 1 && columnCount > 1) && (\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  startIcon={<BarChartIcon />}\n                  sx={{ display: 'flex', alignItems: 'center', padding: '8px 16px', marginLeft: '15px', width: '190px', fontSize: '10px', fontWeight: 'bold' }}\n                  onClick={handleGraphClick}\n                >\n                  Graph View\n                </Button>\n              )}\n            </div>\n          );\n        } else if (typeof data.modelreply === 'string') {\n          const sqlRegex = /```sql([\\s\\S]*?)```/g;\n          const parts = [];\n          let lastIndex = 0;\n          let match;\n\n          // Split the response into SQL and text\n          while ((match = sqlRegex.exec(data.modelreply)) !== null) {\n            // Add the text before the SQL block\n            if (match.index > lastIndex) {\n              parts.push(\n                <p key={`text-${lastIndex}`} style={{ margin: \"8px 0\" }}>\n                  {data.modelreply.slice(lastIndex, match.index).trim()}\n                </p>\n              );\n            }\n\n            // Format the SQL block\n            const sqlContent = match[1].trim();\n            try {\n              parts.push(\n                <pre key={`sql-${match.index}`} style={{ margin: '8px 0' }}>\n                  <code style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>\n                    {sqlFormatter(sqlContent)}\n                  </code>\n                </pre>\n              );\n            } catch (err) {\n              console.error(\"SQL Formatting Error:\", err);\n              parts.push(\n                <pre key={`sql-${match.index}`} style={{ margin: '8px 0', color: 'red' }}>\n                  {sqlContent}\n                </pre>\n              );\n            }\n\n            lastIndex = sqlRegex.lastIndex;\n          }\n          // if (lastIndex < data.modelreply.length) {\n          //   parts.push(\n          //     <p key={`text-${lastIndex}`} style={{ margin: \"8px 0\" }}>\n          //       {data.modelreply.slice(lastIndex).trim()}\n          //     </p>\n          //   );\n          // }\n\n          if (lastIndex < data.modelreply.length) {\n            const remainingContent = data.modelreply.slice(lastIndex).trim();\n            if (/SELECT|WHERE|FROM/i.test(remainingContent)) {\n              // Treat remaining content as SQL\n              try {\n                parts.push(\n                  <pre key={`sql-remaining`} style={{ margin: '8px 0' }}>\n                    <code style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>\n                      {sqlFormatter(remainingContent)}\n                    </code>\n                  </pre>\n                );\n              } catch (err) {\n                console.error(\"SQL Formatting Error:\", err);\n                parts.push(\n                  <pre key={`sql-remaining`} style={{ margin: '8px 0', color: 'red' }}>\n                    {remainingContent}\n                  </pre>\n                );\n              }\n            } else {\n              // Add remaining text as-is\n              parts.push(\n                <p key={`text-${lastIndex}`} style={{ margin: \"8px 0\" }}>\n                  {remainingContent}\n                </p>\n              );\n            }\n          }\n\n\n          modelReply = (\n            <div style={{ overflow: \"auto\", maxWidth: \"100%\", padding: \"10px\" }}>\n              {parts}\n            </div>\n          );\n          const raw =  data.modelreply;\n          setRawResponse(raw);\n          setStoredResponse(modelReply)\n          // setStoredResponse(modelReply);\n          setShowButton(true); // Show \"Show SQL\" button\n          setShowExecuteButton(true); // Show \"Execute SQL\" button\n        } else {\n          // Otherwise, convert to string\n          modelReply = convertToString(data.modelreply);\n          const botMessage = { role: 'assistant', content: modelReply, isSQLResponse, };\n          setChatLog([...newChatLog, botMessage]);\n        }\n      }\n    } catch (err) {\n      let fallbackErrorMessage = 'Error communicating with backend.';\n      const errorMessage = {\n        role: 'assistant',\n        content: (\n          <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n            <p style={{ fontSize: '18px', fontWeight: 'bold', textAlign: 'center' }}>{fallbackErrorMessage}</p>\n          </div>\n        ),\n      };\n\n      setChatLog([...newChatLog, errorMessage]);\n      setError('Error communicating with backend');\n      console.error('Error:', err);\n    } finally {\n      setIsLoading(false); // Set loading state to false\n    }\n  }\n\n  const handleInputFocusOrChange = () => {\n    setShowInitialView(false);\n    resetInactivityTimeout();\n  };\n\n  useEffect(() => {\n    resetInactivityTimeout();\n    return () => {\n      if (inactivityTimeoutRef.current) clearTimeout(inactivityTimeoutRef.current);\n    };\n  }, []);\n\n  const handleButtonClick = async () => {\n    try {\n\n      const cleanAndSanitizeResponse = (response) => {\n        if (typeof response !== 'string') {\n          response = JSON.stringify(response); // Ensure response is a string\n        }\n        let cleanedResponse = response\n          .replace(/\\\\n/g, ' ') // Replace line breaks with spaces\n          .replace(/\\s+/g, ' ') // Collapse multiple spaces into a single space\n          .replace(/--.*?;/g, '') // Remove SQL comments starting with --\n          .trim(); // Trim leading and trailing spaces\n        return encodeURIComponent(cleanedResponse); // Encode for URL safety\n      }\n      const sanitizedResponse = cleanAndSanitizeResponse(storedResponse);\n      const encodeResponse = JSON.stringify(sanitizedResponse)\n      const sqlQueryUrl = `${sqlUrl}?app_cd=${appCd}&request_id=${requestId}&exec_query=${encodeResponse}`;\n      const response = await fetch(sqlQueryUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Check if response is okay\n      if (!response.ok) {\n        let errorMessage = '';\n\n        // Handle different status codes\n        if (response.status === 404) {\n          errorMessage = '404 - Not Found';\n        } else if (response.status === 500) {\n          errorMessage = '500 - Internal Server Error';\n        } else {\n          errorMessage = `${response.status} - ${response.statusText}`;\n        }\n\n        // Create an error message object\n        const errorMessageContent = {\n          role: 'assistant',\n          content: (\n            <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n              <p style={{ fontSize: '18px', fontWeight: 'bold', textAlign: 'center' }}>{errorMessage}</p>\n            </div>\n          ),\n        };\n\n        setChatLog((prevChatLog) => [...prevChatLog, errorMessageContent]); // Update chat log with assistant's error message\n        throw new Error(errorMessage); // Re-throw the error for logging purposes\n      }\n\n      const data = await response.json();\n      setData(data);\n\n      // Function to convert object to string\n      const convertToString = (input) => {\n        if (typeof input === 'string') {\n          return input;\n        } else if (Array.isArray(input)) {\n          return input.map(convertToString).join(', ');\n        } else if (typeof input === 'object' && input !== null) {\n          return Object.entries(input)\n            .map(([key, value]) => `${key}: ${convertToString(value)}`)\n            .join(', ');\n        }\n        return String(input);\n      };\n\n      // Handle the response data similarly to handleSubmit\n      let modelReply = 'No valid reply found.'; // Default message\n      if (data) {\n        // Check if the response is a JSON array of objects\n        if (Array.isArray(data) && data.every(item => typeof item === 'object')) {\n          const columnCount = Object.keys(data[0]).length;\n          const rowCount = data.length;\n\n          // Convert to a table-like format with borders for display\n          modelReply = (\n            <div style={{ display: 'flex', alignItems: 'start' }}>\n              <table style={{ borderCollapse: 'collapse', width: '100%' }}>\n                <thead>\n                  <tr>\n                    {Object.keys(data[0]).map((key) => (\n                      <th key={key} style={{ border: '1px solid black', padding: '8px', textAlign: 'left' }}>{key}</th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {data.map((row, rowIndex) => (\n                    <tr key={rowIndex}>\n                      {Object.values(row).map((val, colIndex) => (\n                        <td key={colIndex} style={{ border: '1px solid black', padding: '8px' }}>{convertToString(val)}</td>\n                      ))}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              {(rowCount > 1 && columnCount > 1) && (\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  startIcon={<BarChartIcon />}\n                  sx={{ display: 'flex', alignItems: 'center', padding: '8px 16px', marginLeft: '15px', width: '190px', fontSize: '10px', fontWeight: 'bold' }}\n                  onClick={handleGraphClick}\n                >\n                  Graph View\n                </Button>\n              )}\n            </div>\n          );\n        } else if (typeof data === 'string') {\n          // If it's a string, display it as text and store it in the state\n          modelReply = data;\n          //setStoredResponse(data);\n          setIsLoading(true);\n        } else {\n          // Otherwise, convert to string\n          modelReply = convertToString(data);\n        }\n      }\n\n      const botMessage = {\n        role: 'assistant',\n        content: modelReply,\n      };\n\n      setChatLog((prevChatLog) => [...prevChatLog, botMessage]); // Update chat log with assistant's message\n    } catch (err) {\n      // Handle network errors or other unexpected issues\n      const fallbackErrorMessage = 'Error communicating with backend.';\n      const errorMessageContent = {\n        role: 'assistant',\n        content: (\n          <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n            <p style={{ fontSize: '18px', fontWeight: 'bold', textAlign: 'center' }}>{fallbackErrorMessage}</p>\n          </div>\n        ),\n      };\n\n      setChatLog((prevChatLog) => [...prevChatLog, errorMessageContent]); // Update chat log with assistant's error message\n      console.error('Error:', err); // Log the error for debugging\n    } finally {\n      setIsLoading(false);// Set loading state to false\n      setShowExecuteButton(false);\n      setShowButton(false);\n    }\n  };\n\n  function handleShowResponse() {\n    setShowResponse((prev) => {\n      const newVisibility = !prev; // Toggle SQL response visibilit\n      if (newVisibility) {\n        const botMessage = {\n          role: 'assistant',\n          content: storedResponse,\n        };\n\n        setChatLog((prevChatLog) => [...prevChatLog, botMessage]);\n      } else {\n        setChatLog((prevChatLog) => {\n          if (prevChatLog.length > 0 && prevChatLog[prevChatLog.length - 1].role === 'assistant') {\n            return prevChatLog.slice(0, prevChatLog.length - 1);\n          }\n          return prevChatLog;\n        });\n      }\n\n      return newVisibility;\n    });\n  }\n\n\n  return (\n\n    <Box sx={{\n      display: 'flex',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      width: layoutWidth,\n      flexDirection: 'column',\n      margin: 'auto', ...customStyles.container\n    }}>\n\n      {showInitialView && (\n        <>\n          <div\n            style={{\n              width: '40px',\n              height: 'auto',\n              overflow: 'hidden',\n              marginRight: 2,\n            }}\n          >\n            <img\n              src={chatbotImage}\n              alt=\"Chatbot\"\n              style={{\n                width: '100%',\n                height: '100%',\n                objectFit: 'contain',\n              }}\n            />\n          </div>\n          <Box\n            component=\"p\"\n            sx={{\n              marginTop: '10px',\n              fontSize: '16.5px',\n              fontWeight: 600,\n              color: themeColor,\n              textAlign: 'center',\n              marginBottom: '19%',\n              ...customStyles.initialPrompt\n            }}\n          >\n            {chatInitialMessage}\n\n          </Box>\n\n        </>\n      )}\n\n      <Box sx={{\n        flex: 1,\n        width: '100%',\n        overflowY: 'auto',\n        maxHeight: '73vh',\n        padding: '10px', ...customStyles.chatContainer\n      }}>\n        <ChatMessage chatLog={chatLog} chatbotImage={chatbotImage} userImage={userImage} storedResponse={storedResponse} showResponse={showResponse}\n        />\n        <div ref={endOfMessagesRef} />\n        {showButton && (\n          <><Typography>Please see the details below</Typography><Button variant=\"contained\" color=\"primary\" onClick={handleShowResponse} sx={{ mr: 2 }}>\n            {showResponse ? \"Hide SQL\" : \"Show SQL\"}\n          </Button></>\n        )}\n        {showExecuteButton && (\n          <Button variant=\"contained\" color=\"primary\" onClick={handleButtonClick}>\n            Execute SQL\n          </Button>\n        )}\n        {isLoading && <HashLoader color={themeColor} size={30} aria-label=\"Loading Spinner\" data-testid=\"loader\" />}\n        {/* {responseReceived && <Feedback />} */}\n        {successMessage && <Alert color=\"success\"><span>{successMessage}</span></Alert>}\n      </Box>\n\n      <Box sx={{\n        display: 'flex',\n        justifyContent: 'center',\n        width: '100%',\n        maxWidth: '100%',\n        flexDirection: 'column', ...customStyles.inputContainer\n      }}>\n        <Grid container spacing={2} sx={{ width: '100%', maxWidth: '100%', position: 'fixed', bottom: '50px', left: '67%', transform: 'translateX(-50%)', width: '70%', marginLeft: '8px', flexDirection: 'column' }}>\n          {showInitialView && (\n            <Grid item xs={12} sm={6}>\n              <SuggestedPrompts\n                prompts={suggestedPrompts}\n                sx={{\n                  mb: isSmallScreen || isMediumScreen ? '32px' : '24px',\n                  textAlign: 'center',\n                  width: '100%',\n                  maxWidth: '600px',\n                  marginLeft: 'auto',\n                  marginRight: 'auto',\n                }}\n              />\n            </Grid>\n          )}\n          <Grid item xs={12} sm={6}>\n            <form onSubmit={handleSubmit} style={{ width: '100%', backgroundColor: '#fff', boxShadow: '0px -2px 5px rgba(0, 0, 0, 0.1)', ...customStyles.form }}>\n              <TextField\n                fullWidth\n                placeholder=\"What can I help you with...\"\n                value={input}\n                onChange={(e) => {\n                  setInput(e.target.value);\n                  handleInputFocusOrChange(); // Ensure elements disappear when typing\n                }}\n                onFocus={handleInputFocusOrChange}\n                inputProps={{ maxLength: 400 }}\n                InputProps={{\n                  sx: {\n                    '& .MuiInputBase-input': {\n                      padding: '12px',\n                      fontSize: '13px',\n                      fontWeight: 'bold',\n                      color: themeColor,\n                    },\n                    '& .MuiInputAdornment-root button': {\n                      color: themeColor,\n                    },\n                  },\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton type=\"submit\">\n                        <FaTelegramPlane className=\"h-6 w-6\" color={themeColor} />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </form>\n\n          </Grid>\n        </Grid>\n      </Box>\n      <ChartModal\n        visible={isModalVisible}\n        onClose={handleModalClose}\n        chartData={data || []}  // Ensure you pass valid JSON data\n      />\n      <Modal open={openPopup}\n        onClose={(event, reason) => {\n          if (reason !== \"backdropClick\") {\n            setOpenPopup(false);\n          }\n        }}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}>\n        <Fade in={openPopup}>\n          <Box sx={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            width: 300,\n            bgcolor: 'background.paper',\n            borderRadius: '8px',\n            boxShadow: 24,\n            p: 4,\n            textAlign: 'center',\n          }}>\n            <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>Session Ended</Typography>\n            <Typography sx={{ mt: 2 }}>Your session has ended due to 10 minutes of inactivity.</Typography>\n            {/* New Chat Button */}\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => {\n                setOpenPopup(false);  // Close modal\n                handleNewChat(); // Start new chat\n              }}\n              sx={{ mt: 2 }}\n            >\n              New Chat\n            </Button>\n          </Box>\n        </Fade>\n      </Modal>\n    </Box>\n  );\n};\n\nexport default UserChat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}