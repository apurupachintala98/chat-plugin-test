{"ast":null,"code":"var _jsxFileName = \"/Users/apurupachintala/Documents/GitHub/chat-plugin-test/src/components/UserChat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useLayoutEffect, useEffect } from 'react';\nimport { Alert } from 'flowbite-react';\nimport { FaTelegramPlane } from 'react-icons/fa';\nimport HashLoader from 'react-spinners/HashLoader';\nimport ChatMessage from './ChatMessage';\nimport { Box, Grid, TextField, Button, IconButton, Typography, InputAdornment, Toolbar, useTheme, useMediaQuery, Modal, Backdrop, Fade } from '@mui/material';\nimport ChartModal from './ChartModal';\nimport BarChartIcon from '@mui/icons-material/BarChart';\n// import pageNotFoundImage from '../images/page-not-found-error.png';\n// import internalErrorImage from '../images/internal-error.jpg';\n// import genericErrorImage from '../images/generic-error.png';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction UserChat(props) {\n  _s();\n  const theme = useTheme();\n  const isSmallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n  const isMediumScreen = useMediaQuery(theme.breakpoints.between('sm', 'md'));\n  const {\n    chatLog,\n    setChatLog,\n    themeColor,\n    responseReceived,\n    setResponseReceived,\n    error,\n    setError,\n    chatInitialMessage,\n    isLoading,\n    setIsLoading,\n    successMessage,\n    setSuccessMessage,\n    showInitialView,\n    setShowInitialView,\n    requestId,\n    setRequestId,\n    apiPath,\n    appCd,\n    customStyles = {},\n    chatbotImage,\n    userImage,\n    handleNewChat\n  } = props;\n  const endOfMessagesRef = useRef(null);\n  const [apiResponse, setApiResponse] = useState(null); // New state for storing API response\n  const [input, setInput] = useState('');\n  const layoutWidth = isSmallScreen ? '100%' : isMediumScreen ? '80%' : '70%';\n  const inactivityTimeoutRef = useRef(null); // Ref for the inactivity timeout\n  const [sessionActive, setSessionActive] = useState(true); // State to track session activity\n  const [openPopup, setOpenPopup] = useState(false);\n  const INACTIVITY_TIME = 10 * 60 * 1000;\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  useLayoutEffect(() => {\n    if (endOfMessagesRef.current) {\n      endOfMessagesRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [chatLog]);\n  const handleGraphClick = () => {\n    setIsModalVisible(true);\n  };\n  const handleModalClose = () => {\n    setIsModalVisible(false);\n  };\n  // Handle session end due to inactivity\n  const handleSessionEnd = () => {\n    setSessionActive(false);\n    setChatLog([...chatLog, {\n      role: 'assistant',\n      content: 'Session has ended due to inactivity.'\n    }]);\n    setOpenPopup(true); // Show the popup\n  };\n\n  // Start or reset the inactivity timer\n  const resetInactivityTimeout = () => {\n    if (inactivityTimeoutRef.current) {\n      clearTimeout(inactivityTimeoutRef.current);\n    }\n    inactivityTimeoutRef.current = setTimeout(() => {\n      handleSessionEnd(); // End session after 30 minutes of inactivity\n    }, INACTIVITY_TIME);\n  };\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    // Prevent empty messages\n    if (!input.trim()) return;\n    if (!appCd.trim() || !requestId.trim()) {\n      setError('Please provide valid app_cd and request_id.');\n      return;\n    }\n    const newMessage = {\n      role: 'user',\n      content: input\n    };\n    const newChatLog = [...chatLog, newMessage]; // Add user's message to chat log\n    setChatLog(newChatLog);\n    setInput(''); // Clear the input field\n    setIsLoading(true); // Set loading state\n    setError(''); // Clear any previous error\n    setShowInitialView(false);\n    try {\n      // Dynamic API URL based on user inputs\n      const response = await fetch(`http://localhost:8001/get_llm_response/?app_cd=Chat_bot&request_id=8000`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify([newMessage])\n      });\n\n      // Check if response is okay\n      if (!response.ok) {\n        let errorMessage = '';\n        let imageUrl = '';\n\n        // Handle different status codes\n        if (response.status === 404) {\n          errorMessage = '404 - Not Found';\n          // imageUrl = pageNotFoundImage;\n        } else if (response.status === 500) {\n          errorMessage = '500 - Internal Server Error';\n          // imageUrl = internalErrorImage;\n        } else {\n          errorMessage = `${response.status} - ${response.statusText}`;\n          // imageUrl = genericErrorImage;\n        }\n\n        // // Display the image and error message\n        const botMessage = {\n          role: 'assistant',\n          content: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              flexDirection: 'column'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                fontSize: '18px',\n                fontWeight: 'bold',\n                textAlign: 'center'\n              },\n              children: errorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)\n        };\n        setChatLog([...newChatLog, botMessage]); // Update chat log with assistant's error message\n        throw new Error(errorMessage); // Re-throw the error for logging purposes\n      }\n      const data = await response.json();\n      setApiResponse(data);\n\n      // Function to convert object to string (if needed)\n      const convertToString = input => {\n        if (typeof input === 'string') {\n          return input;\n        } else if (Array.isArray(input)) {\n          // Recursively convert array items\n          return input.map(convertToString).join(', ');\n        } else if (typeof input === 'object' && input !== null) {\n          // Convert key-value pairs\n          return Object.entries(input).map(([key, value]) => `${key}: ${convertToString(value)}`).join(', ');\n        }\n        return String(input);\n      };\n\n      // Determine how to handle the response\n      let modelReply = 'No valid reply found.'; // Default message\n      if (data.modelreply) {\n        // Check if the response is a JSON array of objects\n        if (Array.isArray(data.modelreply) && data.modelreply.every(item => typeof item === 'object')) {\n          const columnCount = Object.keys(data.modelreply[0]).length;\n          const rowCount = data.modelreply.length;\n          // Convert to table-like format with borders for display\n          modelReply = /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'start'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"table\", {\n              style: {\n                borderCollapse: 'collapse',\n                width: '100%'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: Object.keys(data.modelreply[0]).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n                    style: {\n                      border: '1px solid black',\n                      padding: '8px',\n                      textAlign: 'left'\n                    },\n                    children: key\n                  }, key, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 174,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: data.modelreply.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: Object.values(row).map((val, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n                    style: {\n                      border: '1px solid black',\n                      padding: '8px'\n                    },\n                    children: convertToString(val)\n                  }, colIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 182,\n                    columnNumber: 25\n                  }, this))\n                }, rowIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 15\n            }, this), rowCount > 1 && columnCount > 1 && /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              startIcon: /*#__PURE__*/_jsxDEV(BarChartIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 30\n              }, this),\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                padding: '8px 16px',\n                marginLeft: '15px',\n                width: '190px',\n                fontSize: '10px',\n                fontWeight: 'bold'\n              },\n              onClick: handleGraphClick,\n              children: \"Graph View\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this);\n        } else if (typeof data.modelreply === 'string') {\n          // If it's a string, display it as text\n          modelReply = data.modelreply;\n        } else {\n          // Otherwise, convert to string\n          modelReply = convertToString(data.modelreply);\n        }\n      }\n      const botMessage = {\n        role: 'assistant',\n        content: modelReply\n      };\n      setChatLog([...newChatLog, botMessage]); // Update chat log with assistant's message\n    } catch (err) {\n      // setError('Error communicating with backend');\n      // console.error(err);\n      // Catch network errors or other unexpected issues\n      let fallbackErrorMessage = 'Error communicating with backend.';\n      // const fallbackErrorImage = genericErrorImage;  // Default to a generic error image\n      const errorMessage = {\n        role: 'assistant',\n        content: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            flexDirection: 'column'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontSize: '18px',\n              fontWeight: 'bold',\n              textAlign: 'center'\n            },\n            children: fallbackErrorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)\n      };\n      setChatLog([...newChatLog, errorMessage]);\n      setError('Error communicating with backend');\n      console.error('Error:', err);\n    } finally {\n      setIsLoading(false); // Set loading state to false\n    }\n  }\n  const handleInputFocusOrChange = () => {\n    setShowInitialView(false);\n    resetInactivityTimeout();\n  };\n  useEffect(() => {\n    resetInactivityTimeout();\n    return () => {\n      if (inactivityTimeoutRef.current) clearTimeout(inactivityTimeoutRef.current);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      width: layoutWidth,\n      flexDirection: 'column',\n      margin: 'auto',\n      ...customStyles.container\n    },\n    children: [showInitialView && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '40px',\n          height: 'auto',\n          overflow: 'hidden',\n          marginRight: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: chatbotImage,\n          alt: \"Chatbot\",\n          style: {\n            width: '100%',\n            height: '100%',\n            objectFit: 'contain'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        component: \"p\",\n        sx: {\n          marginTop: '10px',\n          fontSize: '16.5px',\n          fontWeight: 600,\n          color: themeColor,\n          textAlign: 'center',\n          marginBottom: '19%',\n          ...customStyles.initialPrompt\n        },\n        children: chatInitialMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flex: 1,\n        width: '100%',\n        overflowY: 'auto',\n        maxHeight: '73vh',\n        padding: '10px',\n        ...customStyles.chatContainer\n      },\n      children: [/*#__PURE__*/_jsxDEV(ChatMessage, {\n        chatLog: chatLog,\n        chatbotImage: chatbotImage,\n        userImage: userImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: endOfMessagesRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(HashLoader, {\n        color: themeColor,\n        size: 30,\n        \"aria-label\": \"Loading Spinner\",\n        \"data-testid\": \"loader\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 23\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(Alert, {\n        color: \"success\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: successMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 51\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        width: '100%',\n        maxWidth: '100%',\n        flexDirection: 'column',\n        ...customStyles.inputContainer\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        sx: {\n          width: '100%',\n          maxWidth: '100%',\n          position: 'fixed',\n          bottom: '50px',\n          left: '67%',\n          transform: 'translateX(-50%)',\n          width: '70%',\n          marginLeft: '8px',\n          flexDirection: 'column'\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            style: {\n              width: '100%',\n              backgroundColor: '#fff',\n              boxShadow: '0px -2px 5px rgba(0, 0, 0, 0.1)',\n              ...customStyles.form\n            },\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              placeholder: \"What can I help you with...\",\n              value: input,\n              onChange: e => {\n                setInput(e.target.value);\n                handleInputFocusOrChange(); // Ensure elements disappear when typing\n              },\n              onFocus: handleInputFocusOrChange,\n              inputProps: {\n                maxLength: 400\n              },\n              InputProps: {\n                sx: {\n                  '& .MuiInputBase-input': {\n                    padding: '12px',\n                    fontSize: '13px',\n                    fontWeight: 'bold',\n                    color: themeColor\n                  },\n                  '& .MuiInputAdornment-root button': {\n                    color: themeColor\n                  }\n                },\n                endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                  position: \"end\",\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    type: \"submit\",\n                    children: /*#__PURE__*/_jsxDEV(FaTelegramPlane, {\n                      className: \"h-6 w-6\",\n                      color: themeColor\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 351,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 350,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 349,\n                  columnNumber: 21\n                }, this)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChartModal, {\n      visible: isModalVisible,\n      onClose: handleModalClose,\n      chartData: (apiResponse === null || apiResponse === void 0 ? void 0 : apiResponse.modelreply) || [] // Ensure you pass valid JSON data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: openPopup,\n      onClose: () => setOpenPopup(false),\n      closeAfterTransition: true,\n      BackdropComponent: Backdrop,\n      BackdropProps: {\n        timeout: 500\n      },\n      children: /*#__PURE__*/_jsxDEV(Fade, {\n        in: openPopup,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            width: 300,\n            bgcolor: 'background.paper',\n            borderRadius: '8px',\n            boxShadow: 24,\n            p: 4,\n            textAlign: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            sx: {\n              fontWeight: 'bold'\n            },\n            children: \"Session Ended\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: {\n              mt: 2\n            },\n            children: \"Your session has ended due to 10 minutes of inactivity.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => {\n              setOpenPopup(false); // Close modal\n              handleNewChat(); // Start new chat\n            },\n            sx: {\n              mt: 2\n            },\n            children: \"New Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 5\n  }, this);\n}\n_s(UserChat, \"Fv3ayz8UFrhI80UBJ10isv3zeG4=\", false, function () {\n  return [useTheme, useMediaQuery, useMediaQuery];\n});\n_c = UserChat;\n;\nexport default UserChat;\nvar _c;\n$RefreshReg$(_c, \"UserChat\");","map":{"version":3,"names":["React","useState","useRef","useLayoutEffect","useEffect","Alert","FaTelegramPlane","HashLoader","ChatMessage","Box","Grid","TextField","Button","IconButton","Typography","InputAdornment","Toolbar","useTheme","useMediaQuery","Modal","Backdrop","Fade","ChartModal","BarChartIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","UserChat","props","_s","theme","isSmallScreen","breakpoints","down","isMediumScreen","between","chatLog","setChatLog","themeColor","responseReceived","setResponseReceived","error","setError","chatInitialMessage","isLoading","setIsLoading","successMessage","setSuccessMessage","showInitialView","setShowInitialView","requestId","setRequestId","apiPath","appCd","customStyles","chatbotImage","userImage","handleNewChat","endOfMessagesRef","apiResponse","setApiResponse","input","setInput","layoutWidth","inactivityTimeoutRef","sessionActive","setSessionActive","openPopup","setOpenPopup","INACTIVITY_TIME","isModalVisible","setIsModalVisible","current","scrollIntoView","behavior","handleGraphClick","handleModalClose","handleSessionEnd","role","content","resetInactivityTimeout","clearTimeout","setTimeout","handleSubmit","e","preventDefault","trim","newMessage","newChatLog","response","fetch","method","headers","body","JSON","stringify","ok","errorMessage","imageUrl","status","statusText","botMessage","style","display","alignItems","flexDirection","children","fontSize","fontWeight","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","Error","data","json","convertToString","Array","isArray","map","join","Object","entries","key","value","String","modelReply","modelreply","every","item","columnCount","keys","length","rowCount","borderCollapse","width","border","padding","row","rowIndex","values","val","colIndex","variant","color","startIcon","sx","marginLeft","onClick","err","fallbackErrorMessage","console","handleInputFocusOrChange","justifyContent","margin","container","height","overflow","marginRight","src","alt","objectFit","component","marginTop","marginBottom","initialPrompt","flex","overflowY","maxHeight","chatContainer","ref","size","maxWidth","inputContainer","spacing","position","bottom","left","transform","xs","sm","onSubmit","backgroundColor","boxShadow","form","fullWidth","placeholder","onChange","target","onFocus","inputProps","maxLength","InputProps","endAdornment","type","className","visible","onClose","chartData","open","closeAfterTransition","BackdropComponent","BackdropProps","timeout","in","top","bgcolor","borderRadius","p","mt","_c","$RefreshReg$"],"sources":["/Users/apurupachintala/Documents/GitHub/chat-plugin-test/src/components/UserChat.jsx"],"sourcesContent":["import React, { useState, useRef, useLayoutEffect, useEffect } from 'react';\nimport { Alert } from 'flowbite-react';\nimport { FaTelegramPlane } from 'react-icons/fa';\nimport HashLoader from 'react-spinners/HashLoader';\nimport ChatMessage from './ChatMessage';\nimport { Box, Grid, TextField, Button, IconButton, Typography, InputAdornment, Toolbar, useTheme, useMediaQuery, Modal, Backdrop, Fade } from '@mui/material';\nimport ChartModal from './ChartModal';\nimport BarChartIcon from '@mui/icons-material/BarChart';\n// import pageNotFoundImage from '../images/page-not-found-error.png';\n// import internalErrorImage from '../images/internal-error.jpg';\n// import genericErrorImage from '../images/generic-error.png';\n\nfunction UserChat(props) {\n  const theme = useTheme();\n  const isSmallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n  const isMediumScreen = useMediaQuery(theme.breakpoints.between('sm', 'md'));\n\n  const {\n    chatLog, setChatLog,\n    themeColor,\n    responseReceived, setResponseReceived,\n    error, setError,\n    chatInitialMessage,\n    isLoading, setIsLoading,\n    successMessage, setSuccessMessage,\n    showInitialView, setShowInitialView,\n    requestId, setRequestId, apiPath, appCd, customStyles = {}, chatbotImage, userImage, handleNewChat\n  } = props;\n\n  const endOfMessagesRef = useRef(null);\n  const [apiResponse, setApiResponse] = useState(null); // New state for storing API response\n  const [input, setInput] = useState('');\n  const layoutWidth = isSmallScreen ? '100%' : isMediumScreen ? '80%' : '70%';\n  const inactivityTimeoutRef = useRef(null); // Ref for the inactivity timeout\n  const [sessionActive, setSessionActive] = useState(true); // State to track session activity\n  const [openPopup, setOpenPopup] = useState(false);\n  const INACTIVITY_TIME = 10 * 60 * 1000;\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  useLayoutEffect(() => {\n    if (endOfMessagesRef.current) {\n      endOfMessagesRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [chatLog]);\n\n  const handleGraphClick = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleModalClose = () => {\n    setIsModalVisible(false);\n  };\n  // Handle session end due to inactivity\n  const handleSessionEnd = () => {\n    setSessionActive(false);\n    setChatLog([...chatLog, { role: 'assistant', content: 'Session has ended due to inactivity.' }]);\n    setOpenPopup(true); // Show the popup\n  };\n\n\n  // Start or reset the inactivity timer\n  const resetInactivityTimeout = () => {\n    if (inactivityTimeoutRef.current) {\n      clearTimeout(inactivityTimeoutRef.current);\n    }\n\n    inactivityTimeoutRef.current = setTimeout(() => {\n      handleSessionEnd(); // End session after 30 minutes of inactivity\n    }, INACTIVITY_TIME);\n  };\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    // Prevent empty messages\n    if (!input.trim()) return;\n    if (!appCd.trim() || !requestId.trim()) {\n      setError('Please provide valid app_cd and request_id.');\n      return;\n    }\n\n    const newMessage = {\n      role: 'user',\n      content: input,\n    };\n\n    const newChatLog = [...chatLog, newMessage]; // Add user's message to chat log\n    setChatLog(newChatLog);\n    setInput(''); // Clear the input field\n    setIsLoading(true); // Set loading state\n    setError(''); // Clear any previous error\n    setShowInitialView(false);\n\n\n\n    try {\n      // Dynamic API URL based on user inputs\n      const response = await fetch(\n        `http://localhost:8001/get_llm_response/?app_cd=Chat_bot&request_id=8000`,\n        {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify([newMessage]),\n        }\n      );\n\n      // Check if response is okay\n      if (!response.ok) {\n        let errorMessage = '';\n        let imageUrl = '';\n\n        // Handle different status codes\n        if (response.status === 404) {\n          errorMessage = '404 - Not Found';\n          // imageUrl = pageNotFoundImage;\n        } else if (response.status === 500) {\n          errorMessage = '500 - Internal Server Error';\n          // imageUrl = internalErrorImage;\n        } else {\n          errorMessage = `${response.status} - ${response.statusText}`;\n          // imageUrl = genericErrorImage;\n        }\n\n        // // Display the image and error message\n        const botMessage = {\n          role: 'assistant',\n          content: (\n            <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n              {/* <img src={imageUrl} alt=\"error\" style={{ width: '500px', height: '500px', marginBottom: '10px' }} /> */}\n              <p style={{ fontSize: '18px', fontWeight: 'bold', textAlign: 'center' }}>{errorMessage}</p>\n            </div>\n          ),\n        };\n\n        setChatLog([...newChatLog, botMessage]); // Update chat log with assistant's error message\n        throw new Error(errorMessage); // Re-throw the error for logging purposes\n      }\n\n      const data = await response.json();\n      setApiResponse(data);\n\n      // Function to convert object to string (if needed)\n      const convertToString = (input) => {\n        if (typeof input === 'string') {\n          return input;\n        } else if (Array.isArray(input)) {\n          // Recursively convert array items\n          return input.map(convertToString).join(', ');\n        } else if (typeof input === 'object' && input !== null) {\n          // Convert key-value pairs\n          return Object.entries(input)\n            .map(([key, value]) => `${key}: ${convertToString(value)}`)\n            .join(', ');\n        }\n        return String(input);\n      };\n\n      // Determine how to handle the response\n      let modelReply = 'No valid reply found.'; // Default message\n      if (data.modelreply) {\n        // Check if the response is a JSON array of objects\n        if (Array.isArray(data.modelreply) && data.modelreply.every(item => typeof item === 'object')) {\n          const columnCount = Object.keys(data.modelreply[0]).length;\n          const rowCount = data.modelreply.length;\n          // Convert to table-like format with borders for display\n          modelReply = (\n            <div style={{ display: 'flex', alignItems: 'start' }}>\n              <table style={{ borderCollapse: 'collapse', width: '100%' }}>\n                <thead>\n                  <tr>\n                    {Object.keys(data.modelreply[0]).map((key) => (\n                      <th key={key} style={{ border: '1px solid black', padding: '8px', textAlign: 'left' }}>{key}</th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {data.modelreply.map((row, rowIndex) => (\n                    <tr key={rowIndex}>\n                      {Object.values(row).map((val, colIndex) => (\n                        <td key={colIndex} style={{ border: '1px solid black', padding: '8px' }}>{convertToString(val)}</td>\n                      ))}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              {(rowCount > 1 && columnCount > 1) && (\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  startIcon={<BarChartIcon />}\n                  sx={{ display: 'flex', alignItems: 'center', padding: '8px 16px', marginLeft: '15px', width: '190px', fontSize: '10px', fontWeight: 'bold' }}\n                  onClick={handleGraphClick}\n                >\n                  Graph View\n                </Button>\n              )}\n            </div>\n          );\n        } else if (typeof data.modelreply === 'string') {\n          // If it's a string, display it as text\n          modelReply = data.modelreply;\n        } else {\n          // Otherwise, convert to string\n          modelReply = convertToString(data.modelreply);\n        }\n      }\n\n      const botMessage = {\n        role: 'assistant',\n        content: modelReply,\n      };\n\n      setChatLog([...newChatLog, botMessage]); // Update chat log with assistant's message\n    } catch (err) {\n      // setError('Error communicating with backend');\n      // console.error(err);\n      // Catch network errors or other unexpected issues\n      let fallbackErrorMessage = 'Error communicating with backend.';\n      // const fallbackErrorImage = genericErrorImage;  // Default to a generic error image\n      const errorMessage = {\n        role: 'assistant',\n        content: (\n          <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n            {/* <img src={fallbackErrorImage} alt=\"error\" style={{ width: '500px', height: '500px', marginBottom: '10px' }} /> */}\n            <p style={{ fontSize: '18px', fontWeight: 'bold', textAlign: 'center' }}>{fallbackErrorMessage}</p>\n          </div>\n        ),\n      };\n\n      setChatLog([...newChatLog, errorMessage]);\n      setError('Error communicating with backend');\n      console.error('Error:', err);\n    } finally {\n      setIsLoading(false); // Set loading state to false\n    }\n  }\n\n  const handleInputFocusOrChange = () => {\n    setShowInitialView(false);\n    resetInactivityTimeout();\n  };\n\n  useEffect(() => {\n    resetInactivityTimeout();\n    return () => {\n      if (inactivityTimeoutRef.current) clearTimeout(inactivityTimeoutRef.current);\n    };\n  }, []);\n\n  return (\n\n    <Box sx={{\n      display: 'flex',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      width: layoutWidth,\n      flexDirection: 'column',\n      margin: 'auto', ...customStyles.container\n    }}>\n\n      {showInitialView && (\n        <>\n          <div\n            style={{\n              width: '40px',\n              height: 'auto',\n              overflow: 'hidden',\n              marginRight: 2,\n            }}\n          >\n            <img\n              src={chatbotImage}\n              alt=\"Chatbot\"\n              style={{\n                width: '100%',\n                height: '100%',\n                objectFit: 'contain',\n              }}\n            />\n          </div>\n          <Box\n            component=\"p\"\n            sx={{\n              marginTop: '10px',\n              fontSize: '16.5px',\n              fontWeight: 600,\n              color: themeColor,\n              textAlign: 'center',\n              marginBottom: '19%',\n              ...customStyles.initialPrompt\n            }}\n          >\n            {chatInitialMessage}\n\n          </Box>\n\n        </>\n      )}\n\n      <Box sx={{\n        flex: 1,\n        width: '100%',\n        overflowY: 'auto',\n        maxHeight: '73vh',\n        padding: '10px', ...customStyles.chatContainer\n      }}>\n        <ChatMessage chatLog={chatLog} chatbotImage={chatbotImage} userImage={userImage} />\n        <div ref={endOfMessagesRef} />\n        {isLoading && <HashLoader color={themeColor} size={30} aria-label=\"Loading Spinner\" data-testid=\"loader\" />}\n        {/* {responseReceived && <Feedback />} */}\n        {successMessage && <Alert color=\"success\"><span>{successMessage}</span></Alert>}\n      </Box>\n\n      <Box sx={{\n        display: 'flex',\n        justifyContent: 'center',\n        width: '100%',\n        maxWidth: '100%',\n        flexDirection: 'column', ...customStyles.inputContainer\n      }}>\n        <Grid container spacing={2} sx={{ width: '100%', maxWidth: '100%', position: 'fixed', bottom: '50px', left: '67%', transform: 'translateX(-50%)', width: '70%', marginLeft: '8px', flexDirection: 'column' }}>\n          <Grid item xs={12} sm={6}>\n            <form onSubmit={handleSubmit} style={{ width: '100%', backgroundColor: '#fff', boxShadow: '0px -2px 5px rgba(0, 0, 0, 0.1)', ...customStyles.form }}>\n              <TextField\n                fullWidth\n                placeholder=\"What can I help you with...\"\n                value={input}\n                onChange={(e) => {\n                  setInput(e.target.value);\n                  handleInputFocusOrChange(); // Ensure elements disappear when typing\n                }}\n                onFocus={handleInputFocusOrChange}\n                inputProps={{ maxLength: 400 }}\n                InputProps={{\n                  sx: {\n                    '& .MuiInputBase-input': {\n                      padding: '12px',\n                      fontSize: '13px',\n                      fontWeight: 'bold',\n                      color: themeColor,\n                    },\n                    '& .MuiInputAdornment-root button': {\n                      color: themeColor,\n                    },\n                  },\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton type=\"submit\">\n                        <FaTelegramPlane className=\"h-6 w-6\" color={themeColor} />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </form>\n          </Grid>\n        </Grid>\n      </Box>\n      <ChartModal\n        visible={isModalVisible}\n        onClose={handleModalClose}\n        chartData={apiResponse?.modelreply || []}  // Ensure you pass valid JSON data\n      />\n      <Modal open={openPopup}\n        onClose={() => setOpenPopup(false)}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}>\n        <Fade in={openPopup}>\n          <Box sx={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            width: 300,\n            bgcolor: 'background.paper',\n            borderRadius: '8px',\n            boxShadow: 24,\n            p: 4,\n            textAlign: 'center',\n          }}>\n            <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>Session Ended</Typography>\n            <Typography sx={{ mt: 2 }}>Your session has ended due to 10 minutes of inactivity.</Typography>\n            {/* New Chat Button */}\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => {\n                setOpenPopup(false);  // Close modal\n                handleNewChat(); // Start new chat\n              }}\n              sx={{ mt: 2 }}\n            >\n              New Chat\n            </Button>\n          </Box>\n        </Fade>\n      </Modal>\n    </Box>\n  );\n};\n\nexport default UserChat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}