{"ast":null,"code":"var _jsxFileName = \"/Users/apurupachintala/Documents/GitHub/chat-plugin-test/src/components/UserChat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useLayoutEffect, useEffect } from 'react';\nimport { Alert } from 'flowbite-react';\nimport { FaTelegramPlane } from 'react-icons/fa';\nimport HashLoader from 'react-spinners/HashLoader';\nimport ChatMessage from './ChatMessage';\nimport { Box, Grid, TextField, Button, IconButton, Typography, InputAdornment, Toolbar, useTheme, useMediaQuery, Modal, Backdrop, Fade, FormControlLabel, Checkbox } from '@mui/material';\nimport ChartModal from './ChartModal';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport { format as sqlFormatter } from 'sql-formatter';\nimport hljs from 'highlight.js/lib/core';\nimport sql from 'highlight.js/lib/languages/sql';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nhljs.registerLanguage('sql', sql);\nfunction UserChat(props) {\n  _s();\n  const theme = useTheme();\n  const isSmallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n  const isMediumScreen = useMediaQuery(theme.breakpoints.between('sm', 'md'));\n  const {\n    chatLog,\n    setChatLog,\n    themeColor,\n    responseReceived,\n    setResponseReceived,\n    error,\n    setError,\n    chatInitialMessage,\n    isLoading,\n    setIsLoading,\n    successMessage,\n    setSuccessMessage,\n    showInitialView,\n    setShowInitialView,\n    requestId,\n    setRequestId,\n    apiPath,\n    sqlUrl,\n    appCd,\n    customStyles = {},\n    chatbotImage,\n    userImage,\n    handleNewChat\n  } = props;\n  const endOfMessagesRef = useRef(null);\n  const [apiResponse, setApiResponse] = useState(null); // New state for storing API response\n  const [input, setInput] = useState('');\n  const layoutWidth = isSmallScreen ? '100%' : isMediumScreen ? '80%' : '70%';\n  const inactivityTimeoutRef = useRef(null); // Ref for the inactivity timeout\n  const [sessionActive, setSessionActive] = useState(true); // State to track session activity\n  const [openPopup, setOpenPopup] = useState(false);\n  const INACTIVITY_TIME = 10 * 60 * 1000;\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [storedResponse, setStoredResponse] = useState(''); // New state to store the response\n  const [showButton, setShowButton] = useState(false); // New state to show/hide the button\n  const [showResponse, setShowResponse] = useState(false);\n  const [data, setData] = useState('');\n  const [showExecuteButton, setShowExecuteButton] = useState(false);\n  useLayoutEffect(() => {\n    if (endOfMessagesRef.current) {\n      endOfMessagesRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [chatLog]);\n  const handleGraphClick = () => {\n    setIsModalVisible(true);\n  };\n  const handleModalClose = () => {\n    setIsModalVisible(false);\n  };\n  // Handle session end due to inactivity\n  const handleSessionEnd = () => {\n    setSessionActive(false);\n    setChatLog([...chatLog, {\n      role: 'assistant',\n      content: 'Session has ended due to inactivity.'\n    }]);\n    setOpenPopup(true); // Show the popup\n  };\n\n  // Start or reset the inactivity timer\n  const resetInactivityTimeout = () => {\n    if (inactivityTimeoutRef.current) {\n      clearTimeout(inactivityTimeoutRef.current);\n    }\n    inactivityTimeoutRef.current = setTimeout(() => {\n      handleSessionEnd(); // End session after 30 minutes of inactivity\n    }, INACTIVITY_TIME);\n  };\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    // Prevent empty messages\n    if (!input.trim()) return;\n    if (!appCd.trim() || !requestId.trim()) {\n      setError('Please provide valid app_cd and request_id.');\n      return;\n    }\n    const newMessage = {\n      role: 'user',\n      content: input\n    };\n    const newChatLog = [...chatLog, newMessage]; // Add user's message to chat log\n    setChatLog(newChatLog);\n    setInput(''); // Clear the input field\n    setIsLoading(true); // Set loading state\n    setError(''); // Clear any previous error\n    setShowInitialView(false);\n    setShowResponse(false);\n    setShowButton(false);\n    setShowExecuteButton(false);\n    try {\n      // Dynamic API URL based on user inputs\n      const url = `${apiPath}?app_cd=${appCd}&request_id=${requestId}`;\n      const response = await fetch(url, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify([newMessage])\n      });\n\n      // Check if response is okay\n      if (!response.ok) {\n        let errorMessage = '';\n\n        // Handle different status codes\n        if (response.status === 404) {\n          errorMessage = '404 - Not Found';\n        } else if (response.status === 500) {\n          errorMessage = '500 - Internal Server Error';\n        } else {\n          errorMessage = `${response.status} - ${response.statusText}`;\n        }\n\n        // // Display the image and error message\n        const botMessage = {\n          role: 'assistant',\n          content: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              flexDirection: 'column'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                fontSize: '18px',\n                fontWeight: 'bold',\n                textAlign: 'center'\n              },\n              children: errorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)\n        };\n        setChatLog([...newChatLog, botMessage]); // Update chat log with assistant's error message\n        throw new Error(errorMessage); // Re-throw the error for logging purposes\n      }\n      const data = await response.json();\n      setApiResponse(data);\n\n      // Function to convert object to string (if needed)\n      const convertToString = input => {\n        if (typeof input === 'string') {\n          return input;\n        } else if (Array.isArray(input)) {\n          // Recursively convert array items\n          return input.map(convertToString).join(', ');\n        } else if (typeof input === 'object' && input !== null) {\n          // Convert key-value pairs\n          return Object.entries(input).map(([key, value]) => `${key}: ${convertToString(value)}`).join(', ');\n        }\n        return String(input);\n      };\n\n      // Determine how to handle the response\n      let isSQLResponse = false;\n      let modelReply = 'No valid reply found.'; // Default message\n      if (data.modelreply) {\n        // Check if the response is a JSON array of objects\n        if (Array.isArray(data.modelreply) && data.modelreply.every(item => typeof item === 'object')) {\n          const columnCount = Object.keys(data.modelreply[0]).length;\n          const rowCount = data.modelreply.length;\n          // Convert to table-like format with borders for display\n          modelReply = /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'start'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"table\", {\n              style: {\n                borderCollapse: 'collapse',\n                width: '100%'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: Object.keys(data.modelreply[0]).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n                    style: {\n                      border: '1px solid black',\n                      padding: '8px',\n                      textAlign: 'left'\n                    },\n                    children: key\n                  }, key, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 179,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: data.modelreply.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: Object.values(row).map((val, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n                    style: {\n                      border: '1px solid black',\n                      padding: '8px'\n                    },\n                    children: convertToString(val)\n                  }, colIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 187,\n                    columnNumber: 25\n                  }, this))\n                }, rowIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this), rowCount > 1 && columnCount > 1 && /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              startIcon: /*#__PURE__*/_jsxDEV(BarChartIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 30\n              }, this),\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                padding: '8px 16px',\n                marginLeft: '15px',\n                width: '190px',\n                fontSize: '10px',\n                fontWeight: 'bold'\n              },\n              onClick: handleGraphClick,\n              children: \"Graph View\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this);\n          const botMessage = {\n            role: 'assistant',\n            content: modelReply\n          };\n          setChatLog([...newChatLog, botMessage]);\n        } else if (typeof data.modelreply === 'string') {\n          const sqlKeywords = [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"FROM\", \"WHERE\"];\n          isSQLResponse = sqlKeywords.some(keyword => data.modelreply.toUpperCase().includes(keyword));\n          if (isSQLResponse) {\n            const parts = data.modelreply.split(/(?=SELECT|INSERT|UPDATE|DELETE|FROM|WHERE)/gi);\n            const formattedResponse = parts.map((part, index) => {\n              const isSQLPart = sqlKeywords.some(keyword => part.toUpperCase().includes(keyword));\n              if (isSQLPart) {\n                try {\n                  return /*#__PURE__*/_jsxDEV(\"pre\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      style: {\n                        whiteSpace: 'pre-wrap',\n                        wordBreak: 'break-word',\n                        overflowWrap: 'anywhere',\n                        padding: '10px'\n                      },\n                      children: sqlFormatter(part)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 223,\n                      columnNumber: 23\n                    }, this)\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 222,\n                    columnNumber: 21\n                  }, this);\n                } catch (err) {\n                  console.error(\"SQL Formatting Error:\", err);\n                  return part;\n                }\n              }\n              return /*#__PURE__*/_jsxDEV(\"p\", {\n                children: part\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 22\n              }, this);\n            });\n            modelReply = /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                overflow: 'auto',\n                maxWidth: '100%',\n                padding: '10px'\n              },\n              children: formattedResponse\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 15\n            }, this);\n            setStoredResponse(modelReply);\n            setShowButton(true); // Show \"Show SQL\" button\n            setShowExecuteButton(true); // Show \"Execute SQL\" button\n          } else {\n            modelReply = data.modelreply;\n            const botMessage = {\n              role: 'assistant',\n              content: modelReply,\n              isSQLResponse\n            };\n            setChatLog([...newChatLog, botMessage]);\n          }\n        } else {\n          // Otherwise, convert to string\n          modelReply = convertToString(data.modelreply);\n          const botMessage = {\n            role: 'assistant',\n            content: modelReply,\n            isSQLResponse\n          };\n          setChatLog([...newChatLog, botMessage]);\n        }\n      }\n    } catch (err) {\n      let fallbackErrorMessage = 'Error communicating with backend.';\n      const errorMessage = {\n        role: 'assistant',\n        content: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            flexDirection: 'column'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontSize: '18px',\n              fontWeight: 'bold',\n              textAlign: 'center'\n            },\n            children: fallbackErrorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this)\n      };\n      setChatLog([...newChatLog, errorMessage]);\n      setError('Error communicating with backend');\n      console.error('Error:', err);\n    } finally {\n      setIsLoading(false); // Set loading state to false\n    }\n  }\n  const handleInputFocusOrChange = () => {\n    setShowInitialView(false);\n    resetInactivityTimeout();\n  };\n  useEffect(() => {\n    resetInactivityTimeout();\n    return () => {\n      if (inactivityTimeoutRef.current) clearTimeout(inactivityTimeoutRef.current);\n    };\n  }, []);\n  const handleButtonClick = async () => {\n    try {\n      const sanitizeQuery = query => {\n        // Example: Remove line breaks, extra spaces, and other unnecessary parts\n        let cleanedQuery = query.replace(/\\n/g, ' ') // Replace newlines with spaces\n        .replace(/\\s\\s+/g, ' ') // Replace multiple spaces with a single space\n        .replace(/WITH __prov AS \\(.+?\\),/g, '') // Remove unwanted WITH clause (specific part of the query)\n        .trim(); // Remove leading and trailing spaces\n\n        // You can add more rules here to remove other unnecessary parts\n        return cleanedQuery;\n      };\n      const decodedStoredResponse = decodeURIComponent(storedResponse);\n      const encodedResponse = sanitizeQuery(decodedStoredResponse); // Encode the storedResponse\n      const sqlQueryUrl = `${sqlUrl}?app_cd=${appCd}&request_id=${requestId}&exec_query=${encodedResponse}`;\n      const response = await fetch(sqlQueryUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Check if response is okay\n      if (!response.ok) {\n        let errorMessage = '';\n\n        // Handle different status codes\n        if (response.status === 404) {\n          errorMessage = '404 - Not Found';\n        } else if (response.status === 500) {\n          errorMessage = '500 - Internal Server Error';\n        } else {\n          errorMessage = `${response.status} - ${response.statusText}`;\n        }\n\n        // Create an error message object\n        const errorMessageContent = {\n          role: 'assistant',\n          content: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              flexDirection: 'column'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                fontSize: '18px',\n                fontWeight: 'bold',\n                textAlign: 'center'\n              },\n              children: errorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }, this)\n        };\n        setChatLog(prevChatLog => [...prevChatLog, errorMessageContent]); // Update chat log with assistant's error message\n        throw new Error(errorMessage); // Re-throw the error for logging purposes\n      }\n      const data = await response.json();\n      setData(data);\n\n      // Function to convert object to string\n      const convertToString = input => {\n        if (typeof input === 'string') {\n          return input;\n        } else if (Array.isArray(input)) {\n          return input.map(convertToString).join(', ');\n        } else if (typeof input === 'object' && input !== null) {\n          return Object.entries(input).map(([key, value]) => `${key}: ${convertToString(value)}`).join(', ');\n        }\n        return String(input);\n      };\n\n      // Handle the response data similarly to handleSubmit\n      let modelReply = 'No valid reply found.'; // Default message\n      if (data) {\n        // Check if the response is a JSON array of objects\n        if (Array.isArray(data) && data.every(item => typeof item === 'object')) {\n          const columnCount = Object.keys(data[0]).length;\n          const rowCount = data.length;\n\n          // Convert to a table-like format with borders for display\n          modelReply = /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'start'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"table\", {\n              style: {\n                borderCollapse: 'collapse',\n                width: '100%'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: Object.keys(data[0]).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n                    style: {\n                      border: '1px solid black',\n                      padding: '8px',\n                      textAlign: 'left'\n                    },\n                    children: key\n                  }, key, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 370,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 368,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: data.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: Object.values(row).map((val, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n                    style: {\n                      border: '1px solid black',\n                      padding: '8px'\n                    },\n                    children: convertToString(val)\n                  }, colIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 378,\n                    columnNumber: 25\n                  }, this))\n                }, rowIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 376,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 15\n            }, this), rowCount > 1 && columnCount > 1 && /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              startIcon: /*#__PURE__*/_jsxDEV(BarChartIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 30\n              }, this),\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                padding: '8px 16px',\n                marginLeft: '15px',\n                width: '190px',\n                fontSize: '10px',\n                fontWeight: 'bold'\n              },\n              onClick: handleGraphClick,\n              children: \"Graph View\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 13\n          }, this);\n        } else if (typeof data === 'string') {\n          // If it's a string, display it as text and store it in the state\n          modelReply = data;\n          //setStoredResponse(data);\n          setIsLoading(true);\n        } else {\n          // Otherwise, convert to string\n          modelReply = convertToString(data);\n        }\n      }\n      const botMessage = {\n        role: 'assistant',\n        content: modelReply\n      };\n      setChatLog(prevChatLog => [...prevChatLog, botMessage]); // Update chat log with assistant's message\n    } catch (err) {\n      // Handle network errors or other unexpected issues\n      const fallbackErrorMessage = 'Error communicating with backend.';\n      const errorMessageContent = {\n        role: 'assistant',\n        content: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            flexDirection: 'column'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontSize: '18px',\n              fontWeight: 'bold',\n              textAlign: 'center'\n            },\n            children: fallbackErrorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }, this)\n      };\n      setChatLog(prevChatLog => [...prevChatLog, errorMessageContent]); // Update chat log with assistant's error message\n      console.error('Error:', err); // Log the error for debugging\n    } finally {\n      setIsLoading(false); // Set loading state to false\n      setShowExecuteButton(false);\n      setShowButton(false);\n    }\n  };\n  function handleShowResponse() {\n    setShowResponse(prev => {\n      const newVisibility = !prev; // Toggle SQL response visibility\n\n      if (newVisibility) {\n        // Format the stored SQL response\n        let formattedSQL = storedResponse;\n        try {\n          formattedSQL = sqlFormatter(storedResponse); // Format SQL using sql-formatter\n        } catch (error) {\n          console.error(\"SQL Formatting Error:\", error);\n        }\n\n        // Create a new bot message if the response is being shown\n        const botMessage = {\n          role: \"assistant\",\n          content: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: /*#__PURE__*/_jsxDEV(\"code\", {\n              className: \"sql\",\n              children: formattedSQL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 13\n          }, this),\n          isSQLResponse: true\n        };\n\n        // Update the chat log with the new bot message\n        setChatLog(prevChatLog => [...prevChatLog, botMessage]);\n\n        // Highlight the newly added code block\n        setTimeout(() => {\n          document.querySelectorAll(\"code.sql\").forEach(block => {\n            hljs.highlightElement(block);\n          });\n        }, 0);\n      } else {\n        // Remove the last bot message when hiding the response\n        setChatLog(prevChatLog => {\n          if (prevChatLog.length > 0 && prevChatLog[prevChatLog.length - 1].isSQLResponse) {\n            return prevChatLog.slice(0, prevChatLog.length - 1);\n          }\n          return prevChatLog; // No changes if the last message isn't the SQL response\n        });\n      }\n      return newVisibility; // Return the new visibility state\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      width: layoutWidth,\n      flexDirection: 'column',\n      margin: 'auto',\n      ...customStyles.container\n    },\n    children: [showInitialView && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '40px',\n          height: 'auto',\n          overflow: 'hidden',\n          marginRight: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: chatbotImage,\n          alt: \"Chatbot\",\n          style: {\n            width: '100%',\n            height: '100%',\n            objectFit: 'contain'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        component: \"p\",\n        sx: {\n          marginTop: '10px',\n          fontSize: '16.5px',\n          fontWeight: 600,\n          color: themeColor,\n          textAlign: 'center',\n          marginBottom: '19%',\n          ...customStyles.initialPrompt\n        },\n        children: chatInitialMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flex: 1,\n        width: '100%',\n        overflowY: 'auto',\n        maxHeight: '73vh',\n        padding: '10px',\n        ...customStyles.chatContainer\n      },\n      children: [/*#__PURE__*/_jsxDEV(ChatMessage, {\n        chatLog: chatLog,\n        chatbotImage: chatbotImage,\n        userImage: userImage,\n        storedResponse: storedResponse,\n        showResponse: showResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: endOfMessagesRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 9\n      }, this), showButton && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleShowResponse,\n        sx: {\n          mr: 2\n        },\n        children: showResponse ? \"Hide SQL\" : \"Show SQL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 11\n      }, this), showExecuteButton && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleButtonClick,\n        children: \"Execute SQL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 11\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(HashLoader, {\n        color: themeColor,\n        size: 30,\n        \"aria-label\": \"Loading Spinner\",\n        \"data-testid\": \"loader\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 23\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(Alert, {\n        color: \"success\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: successMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 51\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        width: '100%',\n        maxWidth: '100%',\n        flexDirection: 'column',\n        ...customStyles.inputContainer\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        sx: {\n          width: '100%',\n          maxWidth: '100%',\n          position: 'fixed',\n          bottom: '50px',\n          left: '67%',\n          transform: 'translateX(-50%)',\n          width: '70%',\n          marginLeft: '8px',\n          flexDirection: 'column'\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            style: {\n              width: '100%',\n              backgroundColor: '#fff',\n              boxShadow: '0px -2px 5px rgba(0, 0, 0, 0.1)',\n              ...customStyles.form\n            },\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              placeholder: \"What can I help you with...\",\n              value: input,\n              onChange: e => {\n                setInput(e.target.value);\n                handleInputFocusOrChange(); // Ensure elements disappear when typing\n              },\n              onFocus: handleInputFocusOrChange,\n              inputProps: {\n                maxLength: 400\n              },\n              InputProps: {\n                sx: {\n                  '& .MuiInputBase-input': {\n                    padding: '12px',\n                    fontSize: '13px',\n                    fontWeight: 'bold',\n                    color: themeColor\n                  },\n                  '& .MuiInputAdornment-root button': {\n                    color: themeColor\n                  }\n                },\n                endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                  position: \"end\",\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    type: \"submit\",\n                    children: /*#__PURE__*/_jsxDEV(FaTelegramPlane, {\n                      className: \"h-6 w-6\",\n                      color: themeColor\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 592,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 591,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 590,\n                  columnNumber: 21\n                }, this)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChartModal, {\n      visible: isModalVisible,\n      onClose: handleModalClose,\n      chartData: data || [] // Ensure you pass valid JSON data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 603,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: openPopup,\n      onClose: (event, reason) => {\n        if (reason !== \"backdropClick\") {\n          setOpenPopup(false);\n        }\n      },\n      closeAfterTransition: true,\n      BackdropComponent: Backdrop,\n      BackdropProps: {\n        timeout: 500\n      },\n      children: /*#__PURE__*/_jsxDEV(Fade, {\n        in: openPopup,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            width: 300,\n            bgcolor: 'background.paper',\n            borderRadius: '8px',\n            boxShadow: 24,\n            p: 4,\n            textAlign: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            sx: {\n              fontWeight: 'bold'\n            },\n            children: \"Session Ended\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 632,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: {\n              mt: 2\n            },\n            children: \"Your session has ended due to 10 minutes of inactivity.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => {\n              setOpenPopup(false); // Close modal\n              handleNewChat(); // Start new chat\n            },\n            sx: {\n              mt: 2\n            },\n            children: \"New Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 484,\n    columnNumber: 5\n  }, this);\n}\n_s(UserChat, \"WhUx8HJHfqnK8SQWW07+7RqsHR0=\", false, function () {\n  return [useTheme, useMediaQuery, useMediaQuery];\n});\n_c = UserChat;\n;\nexport default UserChat;\nvar _c;\n$RefreshReg$(_c, \"UserChat\");","map":{"version":3,"names":["React","useState","useRef","useLayoutEffect","useEffect","Alert","FaTelegramPlane","HashLoader","ChatMessage","Box","Grid","TextField","Button","IconButton","Typography","InputAdornment","Toolbar","useTheme","useMediaQuery","Modal","Backdrop","Fade","FormControlLabel","Checkbox","ChartModal","BarChartIcon","format","sqlFormatter","hljs","sql","jsxDEV","_jsxDEV","Fragment","_Fragment","registerLanguage","UserChat","props","_s","theme","isSmallScreen","breakpoints","down","isMediumScreen","between","chatLog","setChatLog","themeColor","responseReceived","setResponseReceived","error","setError","chatInitialMessage","isLoading","setIsLoading","successMessage","setSuccessMessage","showInitialView","setShowInitialView","requestId","setRequestId","apiPath","sqlUrl","appCd","customStyles","chatbotImage","userImage","handleNewChat","endOfMessagesRef","apiResponse","setApiResponse","input","setInput","layoutWidth","inactivityTimeoutRef","sessionActive","setSessionActive","openPopup","setOpenPopup","INACTIVITY_TIME","isModalVisible","setIsModalVisible","storedResponse","setStoredResponse","showButton","setShowButton","showResponse","setShowResponse","data","setData","showExecuteButton","setShowExecuteButton","current","scrollIntoView","behavior","handleGraphClick","handleModalClose","handleSessionEnd","role","content","resetInactivityTimeout","clearTimeout","setTimeout","handleSubmit","e","preventDefault","trim","newMessage","newChatLog","url","response","fetch","method","headers","body","JSON","stringify","ok","errorMessage","status","statusText","botMessage","style","display","alignItems","flexDirection","children","fontSize","fontWeight","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","Error","json","convertToString","Array","isArray","map","join","Object","entries","key","value","String","isSQLResponse","modelReply","modelreply","every","item","columnCount","keys","length","rowCount","borderCollapse","width","border","padding","row","rowIndex","values","val","colIndex","variant","color","startIcon","sx","marginLeft","onClick","sqlKeywords","some","keyword","toUpperCase","includes","parts","split","formattedResponse","part","index","isSQLPart","whiteSpace","wordBreak","overflowWrap","err","console","overflow","maxWidth","fallbackErrorMessage","handleInputFocusOrChange","handleButtonClick","sanitizeQuery","query","cleanedQuery","replace","decodedStoredResponse","decodeURIComponent","encodedResponse","sqlQueryUrl","errorMessageContent","prevChatLog","handleShowResponse","prev","newVisibility","formattedSQL","className","document","querySelectorAll","forEach","block","highlightElement","slice","justifyContent","margin","container","height","marginRight","src","alt","objectFit","component","marginTop","marginBottom","initialPrompt","flex","overflowY","maxHeight","chatContainer","ref","mr","size","inputContainer","spacing","position","bottom","left","transform","xs","sm","onSubmit","backgroundColor","boxShadow","form","fullWidth","placeholder","onChange","target","onFocus","inputProps","maxLength","InputProps","endAdornment","type","visible","onClose","chartData","open","event","reason","closeAfterTransition","BackdropComponent","BackdropProps","timeout","in","top","bgcolor","borderRadius","p","mt","_c","$RefreshReg$"],"sources":["/Users/apurupachintala/Documents/GitHub/chat-plugin-test/src/components/UserChat.jsx"],"sourcesContent":["import React, { useState, useRef, useLayoutEffect, useEffect } from 'react';\nimport { Alert } from 'flowbite-react';\nimport { FaTelegramPlane } from 'react-icons/fa';\nimport HashLoader from 'react-spinners/HashLoader';\nimport ChatMessage from './ChatMessage';\nimport { Box, Grid, TextField, Button, IconButton, Typography, InputAdornment, Toolbar, useTheme, useMediaQuery, Modal, Backdrop, Fade, FormControlLabel, Checkbox } from '@mui/material';\nimport ChartModal from './ChartModal';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport { format as sqlFormatter } from 'sql-formatter';\nimport hljs from 'highlight.js/lib/core';\nimport sql from 'highlight.js/lib/languages/sql';\n\n\nhljs.registerLanguage('sql', sql);\nfunction UserChat(props) {\n  const theme = useTheme();\n  const isSmallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n  const isMediumScreen = useMediaQuery(theme.breakpoints.between('sm', 'md'));\n\n  const {\n    chatLog, setChatLog,\n    themeColor,\n    responseReceived, setResponseReceived,\n    error, setError,\n    chatInitialMessage,\n    isLoading, setIsLoading,\n    successMessage, setSuccessMessage,\n    showInitialView, setShowInitialView,\n    requestId, setRequestId, apiPath, sqlUrl, appCd, customStyles = {}, chatbotImage, userImage, handleNewChat\n  } = props;\n\n  const endOfMessagesRef = useRef(null);\n  const [apiResponse, setApiResponse] = useState(null); // New state for storing API response\n  const [input, setInput] = useState('');\n  const layoutWidth = isSmallScreen ? '100%' : isMediumScreen ? '80%' : '70%';\n  const inactivityTimeoutRef = useRef(null); // Ref for the inactivity timeout\n  const [sessionActive, setSessionActive] = useState(true); // State to track session activity\n  const [openPopup, setOpenPopup] = useState(false);\n  const INACTIVITY_TIME = 10 * 60 * 1000;\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [storedResponse, setStoredResponse] = useState(''); // New state to store the response\n  const [showButton, setShowButton] = useState(false); // New state to show/hide the button\n  const [showResponse, setShowResponse] = useState(false);\n  const [data, setData] = useState('');\n  const [showExecuteButton, setShowExecuteButton] = useState(false);\n\n\n  useLayoutEffect(() => {\n    if (endOfMessagesRef.current) {\n      endOfMessagesRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [chatLog]);\n\n  const handleGraphClick = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleModalClose = () => {\n    setIsModalVisible(false);\n  };\n  // Handle session end due to inactivity\n  const handleSessionEnd = () => {\n    setSessionActive(false);\n    setChatLog([...chatLog, { role: 'assistant', content: 'Session has ended due to inactivity.' }]);\n    setOpenPopup(true); // Show the popup\n  };\n\n  // Start or reset the inactivity timer\n  const resetInactivityTimeout = () => {\n    if (inactivityTimeoutRef.current) {\n      clearTimeout(inactivityTimeoutRef.current);\n    }\n\n    inactivityTimeoutRef.current = setTimeout(() => {\n      handleSessionEnd(); // End session after 30 minutes of inactivity\n    }, INACTIVITY_TIME);\n  };\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    // Prevent empty messages\n    if (!input.trim()) return;\n    if (!appCd.trim() || !requestId.trim()) {\n      setError('Please provide valid app_cd and request_id.');\n      return;\n    }\n\n    const newMessage = {\n      role: 'user',\n      content: input,\n    };\n\n    const newChatLog = [...chatLog, newMessage]; // Add user's message to chat log\n    setChatLog(newChatLog);\n    setInput(''); // Clear the input field\n    setIsLoading(true); // Set loading state\n    setError(''); // Clear any previous error\n    setShowInitialView(false);\n    setShowResponse(false);\n    setShowButton(false);\n    setShowExecuteButton(false);\n\n    try {\n      // Dynamic API URL based on user inputs\n      const url = `${apiPath}?app_cd=${appCd}&request_id=${requestId}`;\n      const response = await fetch(\n        url,\n        {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify([newMessage]),\n        }\n      );\n\n      // Check if response is okay\n      if (!response.ok) {\n        let errorMessage = '';\n\n        // Handle different status codes\n        if (response.status === 404) {\n          errorMessage = '404 - Not Found';\n        } else if (response.status === 500) {\n          errorMessage = '500 - Internal Server Error';\n        } else {\n          errorMessage = `${response.status} - ${response.statusText}`;\n        }\n\n        // // Display the image and error message\n        const botMessage = {\n          role: 'assistant',\n          content: (\n            <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n              <p style={{ fontSize: '18px', fontWeight: 'bold', textAlign: 'center' }}>{errorMessage}</p>\n            </div>\n          ),\n        };\n\n        setChatLog([...newChatLog, botMessage]); // Update chat log with assistant's error message\n        throw new Error(errorMessage); // Re-throw the error for logging purposes\n      }\n\n      const data = await response.json();\n      setApiResponse(data);\n\n      // Function to convert object to string (if needed)\n      const convertToString = (input) => {\n        if (typeof input === 'string') {\n          return input;\n        } else if (Array.isArray(input)) {\n          // Recursively convert array items\n          return input.map(convertToString).join(', ');\n        } else if (typeof input === 'object' && input !== null) {\n          // Convert key-value pairs\n          return Object.entries(input)\n            .map(([key, value]) => `${key}: ${convertToString(value)}`)\n            .join(', ');\n        }\n        return String(input);\n      };\n\n      // Determine how to handle the response\n      let isSQLResponse = false;\n      let modelReply = 'No valid reply found.'; // Default message\n      if (data.modelreply) {\n        // Check if the response is a JSON array of objects\n        if (Array.isArray(data.modelreply) && data.modelreply.every(item => typeof item === 'object')) {\n          const columnCount = Object.keys(data.modelreply[0]).length;\n          const rowCount = data.modelreply.length;\n          // Convert to table-like format with borders for display\n          modelReply = (\n            <div style={{ display: 'flex', alignItems: 'start' }}>\n              <table style={{ borderCollapse: 'collapse', width: '100%' }}>\n                <thead>\n                  <tr>\n                    {Object.keys(data.modelreply[0]).map((key) => (\n                      <th key={key} style={{ border: '1px solid black', padding: '8px', textAlign: 'left' }}>{key}</th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {data.modelreply.map((row, rowIndex) => (\n                    <tr key={rowIndex}>\n                      {Object.values(row).map((val, colIndex) => (\n                        <td key={colIndex} style={{ border: '1px solid black', padding: '8px' }}>{convertToString(val)}</td>\n                      ))}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              {(rowCount > 1 && columnCount > 1) && (\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  startIcon={<BarChartIcon />}\n                  sx={{ display: 'flex', alignItems: 'center', padding: '8px 16px', marginLeft: '15px', width: '190px', fontSize: '10px', fontWeight: 'bold' }}\n                  onClick={handleGraphClick}\n                >\n                  Graph View\n                </Button>\n              )}\n            </div>\n          );\n          const botMessage = { role: 'assistant', content: modelReply };\n          setChatLog([...newChatLog, botMessage]);\n        } else if (typeof data.modelreply === 'string') {\n          const sqlKeywords = [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"FROM\", \"WHERE\"];\n          isSQLResponse = sqlKeywords.some((keyword) =>\n            data.modelreply.toUpperCase().includes(keyword)\n          );\n          if (isSQLResponse) {\n            const parts = data.modelreply.split(/(?=SELECT|INSERT|UPDATE|DELETE|FROM|WHERE)/gi);\n            const formattedResponse = parts.map((part, index) => {\n              const isSQLPart = sqlKeywords.some((keyword) =>\n                part.toUpperCase().includes(keyword)\n              );\n              if (isSQLPart) {\n                try {\n                  return (\n                    <pre key={index}>\n                      <code style={{ whiteSpace: 'pre-wrap',\n  wordBreak: 'break-word',\n  overflowWrap: 'anywhere',\n  padding: '10px',}}>{sqlFormatter(part)}</code>\n                    </pre>\n                  );\n                } catch (err) {\n                  console.error(\"SQL Formatting Error:\", err);\n                  return part;\n                }\n              }\n              return <p key={index}>{part}</p>;\n            });\n\n            modelReply = (\n              <div style={{ overflow: 'auto', maxWidth: '100%', padding: '10px' }}>\n                {formattedResponse}\n              </div>\n            );\n            setStoredResponse(modelReply);\n            setShowButton(true); // Show \"Show SQL\" button\n            setShowExecuteButton(true); // Show \"Execute SQL\" button\n          } else {\n            modelReply = data.modelreply;\n            const botMessage = { role: 'assistant', content: modelReply, isSQLResponse };\n            setChatLog([...newChatLog, botMessage]);\n          }\n        } else {\n          // Otherwise, convert to string\n          modelReply = convertToString(data.modelreply);\n          const botMessage = { role: 'assistant', content: modelReply, isSQLResponse, };\n          setChatLog([...newChatLog, botMessage]);\n        }\n      }\n    } catch (err) {\n      let fallbackErrorMessage = 'Error communicating with backend.';\n      const errorMessage = {\n        role: 'assistant',\n        content: (\n          <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n            <p style={{ fontSize: '18px', fontWeight: 'bold', textAlign: 'center' }}>{fallbackErrorMessage}</p>\n          </div>\n        ),\n      };\n\n      setChatLog([...newChatLog, errorMessage]);\n      setError('Error communicating with backend');\n      console.error('Error:', err);\n    } finally {\n      setIsLoading(false); // Set loading state to false\n    }\n  }\n\n  const handleInputFocusOrChange = () => {\n    setShowInitialView(false);\n    resetInactivityTimeout();\n  };\n\n  useEffect(() => {\n    resetInactivityTimeout();\n    return () => {\n      if (inactivityTimeoutRef.current) clearTimeout(inactivityTimeoutRef.current);\n    };\n  }, []);\n\n  const handleButtonClick = async () => {\n    try {\n      const sanitizeQuery = (query) => {\n        // Example: Remove line breaks, extra spaces, and other unnecessary parts\n        let cleanedQuery = query\n          .replace(/\\n/g, ' ') // Replace newlines with spaces\n          .replace(/\\s\\s+/g, ' ') // Replace multiple spaces with a single space\n          .replace(/WITH __prov AS \\(.+?\\),/g, '') // Remove unwanted WITH clause (specific part of the query)\n          .trim(); // Remove leading and trailing spaces\n\n        // You can add more rules here to remove other unnecessary parts\n        return cleanedQuery;\n      };\n      const decodedStoredResponse = decodeURIComponent(storedResponse);\n      const encodedResponse = sanitizeQuery(decodedStoredResponse); // Encode the storedResponse\n      const sqlQueryUrl = `${sqlUrl}?app_cd=${appCd}&request_id=${requestId}&exec_query=${encodedResponse}`;\n      const response = await fetch(sqlQueryUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Check if response is okay\n      if (!response.ok) {\n        let errorMessage = '';\n\n        // Handle different status codes\n        if (response.status === 404) {\n          errorMessage = '404 - Not Found';\n        } else if (response.status === 500) {\n          errorMessage = '500 - Internal Server Error';\n        } else {\n          errorMessage = `${response.status} - ${response.statusText}`;\n        }\n\n        // Create an error message object\n        const errorMessageContent = {\n          role: 'assistant',\n          content: (\n            <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n              <p style={{ fontSize: '18px', fontWeight: 'bold', textAlign: 'center' }}>{errorMessage}</p>\n            </div>\n          ),\n        };\n\n        setChatLog((prevChatLog) => [...prevChatLog, errorMessageContent]); // Update chat log with assistant's error message\n        throw new Error(errorMessage); // Re-throw the error for logging purposes\n      }\n\n      const data = await response.json();\n      setData(data);\n\n      // Function to convert object to string\n      const convertToString = (input) => {\n        if (typeof input === 'string') {\n          return input;\n        } else if (Array.isArray(input)) {\n          return input.map(convertToString).join(', ');\n        } else if (typeof input === 'object' && input !== null) {\n          return Object.entries(input)\n            .map(([key, value]) => `${key}: ${convertToString(value)}`)\n            .join(', ');\n        }\n        return String(input);\n      };\n\n      // Handle the response data similarly to handleSubmit\n      let modelReply = 'No valid reply found.'; // Default message\n      if (data) {\n        // Check if the response is a JSON array of objects\n        if (Array.isArray(data) && data.every(item => typeof item === 'object')) {\n          const columnCount = Object.keys(data[0]).length;\n          const rowCount = data.length;\n\n          // Convert to a table-like format with borders for display\n          modelReply = (\n            <div style={{ display: 'flex', alignItems: 'start' }}>\n              <table style={{ borderCollapse: 'collapse', width: '100%' }}>\n                <thead>\n                  <tr>\n                    {Object.keys(data[0]).map((key) => (\n                      <th key={key} style={{ border: '1px solid black', padding: '8px', textAlign: 'left' }}>{key}</th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {data.map((row, rowIndex) => (\n                    <tr key={rowIndex}>\n                      {Object.values(row).map((val, colIndex) => (\n                        <td key={colIndex} style={{ border: '1px solid black', padding: '8px' }}>{convertToString(val)}</td>\n                      ))}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              {(rowCount > 1 && columnCount > 1) && (\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  startIcon={<BarChartIcon />}\n                  sx={{ display: 'flex', alignItems: 'center', padding: '8px 16px', marginLeft: '15px', width: '190px', fontSize: '10px', fontWeight: 'bold' }}\n                  onClick={handleGraphClick}\n                >\n                  Graph View\n                </Button>\n              )}\n            </div>\n          );\n        } else if (typeof data === 'string') {\n          // If it's a string, display it as text and store it in the state\n          modelReply = data;\n          //setStoredResponse(data);\n          setIsLoading(true);\n        } else {\n          // Otherwise, convert to string\n          modelReply = convertToString(data);\n        }\n      }\n\n      const botMessage = {\n        role: 'assistant',\n        content: modelReply,\n      };\n\n      setChatLog((prevChatLog) => [...prevChatLog, botMessage]); // Update chat log with assistant's message\n    } catch (err) {\n      // Handle network errors or other unexpected issues\n      const fallbackErrorMessage = 'Error communicating with backend.';\n      const errorMessageContent = {\n        role: 'assistant',\n        content: (\n          <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n            <p style={{ fontSize: '18px', fontWeight: 'bold', textAlign: 'center' }}>{fallbackErrorMessage}</p>\n          </div>\n        ),\n      };\n\n      setChatLog((prevChatLog) => [...prevChatLog, errorMessageContent]); // Update chat log with assistant's error message\n      console.error('Error:', err); // Log the error for debugging\n    } finally {\n      setIsLoading(false);// Set loading state to false\n      setShowExecuteButton(false);\n      setShowButton(false);\n    }\n  };\n\n  function handleShowResponse() {\n    setShowResponse((prev) => {\n      const newVisibility = !prev; // Toggle SQL response visibility\n\n      if (newVisibility) {\n        // Format the stored SQL response\n        let formattedSQL = storedResponse;\n        try {\n          formattedSQL = sqlFormatter(storedResponse); // Format SQL using sql-formatter\n        } catch (error) {\n          console.error(\"SQL Formatting Error:\", error);\n        }\n\n        // Create a new bot message if the response is being shown\n        const botMessage = {\n          role: \"assistant\",\n          content: (\n            <pre>\n              <code className=\"sql\">{formattedSQL}</code>\n            </pre>\n          ),\n          isSQLResponse: true,\n        };\n\n        // Update the chat log with the new bot message\n        setChatLog((prevChatLog) => [...prevChatLog, botMessage]);\n\n        // Highlight the newly added code block\n        setTimeout(() => {\n          document.querySelectorAll(\"code.sql\").forEach((block) => {\n            hljs.highlightElement(block);\n          });\n        }, 0);\n      } else {\n        // Remove the last bot message when hiding the response\n        setChatLog((prevChatLog) => {\n          if (prevChatLog.length > 0 && prevChatLog[prevChatLog.length - 1].isSQLResponse) {\n            return prevChatLog.slice(0, prevChatLog.length - 1);\n          }\n          return prevChatLog; // No changes if the last message isn't the SQL response\n        });\n      }\n\n      return newVisibility; // Return the new visibility state\n    });\n  }\n\n  return (\n\n    <Box sx={{\n      display: 'flex',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      width: layoutWidth,\n      flexDirection: 'column',\n      margin: 'auto', ...customStyles.container\n    }}>\n\n      {showInitialView && (\n        <>\n          <div\n            style={{\n              width: '40px',\n              height: 'auto',\n              overflow: 'hidden',\n              marginRight: 2,\n            }}\n          >\n            <img\n              src={chatbotImage}\n              alt=\"Chatbot\"\n              style={{\n                width: '100%',\n                height: '100%',\n                objectFit: 'contain',\n              }}\n            />\n          </div>\n          <Box\n            component=\"p\"\n            sx={{\n              marginTop: '10px',\n              fontSize: '16.5px',\n              fontWeight: 600,\n              color: themeColor,\n              textAlign: 'center',\n              marginBottom: '19%',\n              ...customStyles.initialPrompt\n            }}\n          >\n            {chatInitialMessage}\n\n          </Box>\n\n        </>\n      )}\n\n      <Box sx={{\n        flex: 1,\n        width: '100%',\n        overflowY: 'auto',\n        maxHeight: '73vh',\n        padding: '10px', ...customStyles.chatContainer\n      }}>\n        <ChatMessage chatLog={chatLog} chatbotImage={chatbotImage} userImage={userImage} storedResponse={storedResponse} showResponse={showResponse}\n        />\n        <div ref={endOfMessagesRef} />\n        {showButton && (\n          <Button variant=\"contained\" color=\"primary\" onClick={handleShowResponse} sx={{ mr: 2 }}>\n            {showResponse ? \"Hide SQL\" : \"Show SQL\"}\n          </Button>\n        )}\n        {showExecuteButton && (\n          <Button variant=\"contained\" color=\"primary\" onClick={handleButtonClick}>\n            Execute SQL\n          </Button>\n        )}\n        {isLoading && <HashLoader color={themeColor} size={30} aria-label=\"Loading Spinner\" data-testid=\"loader\" />}\n        {/* {responseReceived && <Feedback />} */}\n        {successMessage && <Alert color=\"success\"><span>{successMessage}</span></Alert>}\n      </Box>\n\n      <Box sx={{\n        display: 'flex',\n        justifyContent: 'center',\n        width: '100%',\n        maxWidth: '100%',\n        flexDirection: 'column', ...customStyles.inputContainer\n      }}>\n        <Grid container spacing={2} sx={{ width: '100%', maxWidth: '100%', position: 'fixed', bottom: '50px', left: '67%', transform: 'translateX(-50%)', width: '70%', marginLeft: '8px', flexDirection: 'column' }}>\n          <Grid item xs={12} sm={6}>\n            <form onSubmit={handleSubmit} style={{ width: '100%', backgroundColor: '#fff', boxShadow: '0px -2px 5px rgba(0, 0, 0, 0.1)', ...customStyles.form }}>\n              <TextField\n                fullWidth\n                placeholder=\"What can I help you with...\"\n                value={input}\n                onChange={(e) => {\n                  setInput(e.target.value);\n                  handleInputFocusOrChange(); // Ensure elements disappear when typing\n                }}\n                onFocus={handleInputFocusOrChange}\n                inputProps={{ maxLength: 400 }}\n                InputProps={{\n                  sx: {\n                    '& .MuiInputBase-input': {\n                      padding: '12px',\n                      fontSize: '13px',\n                      fontWeight: 'bold',\n                      color: themeColor,\n                    },\n                    '& .MuiInputAdornment-root button': {\n                      color: themeColor,\n                    },\n                  },\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton type=\"submit\">\n                        <FaTelegramPlane className=\"h-6 w-6\" color={themeColor} />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </form>\n\n          </Grid>\n        </Grid>\n      </Box>\n      <ChartModal\n        visible={isModalVisible}\n        onClose={handleModalClose}\n        chartData={data || []}  // Ensure you pass valid JSON data\n      />\n      <Modal open={openPopup}\n        onClose={(event, reason) => {\n          if (reason !== \"backdropClick\") {\n            setOpenPopup(false);\n          }\n        }}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}>\n        <Fade in={openPopup}>\n          <Box sx={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            width: 300,\n            bgcolor: 'background.paper',\n            borderRadius: '8px',\n            boxShadow: 24,\n            p: 4,\n            textAlign: 'center',\n          }}>\n            <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>Session Ended</Typography>\n            <Typography sx={{ mt: 2 }}>Your session has ended due to 10 minutes of inactivity.</Typography>\n            {/* New Chat Button */}\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => {\n                setOpenPopup(false);  // Close modal\n                handleNewChat(); // Start new chat\n              }}\n              sx={{ mt: 2 }}\n            >\n              New Chat\n            </Button>\n          </Box>\n        </Fade>\n      </Modal>\n    </Box>\n  );\n};\n\nexport default UserChat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}