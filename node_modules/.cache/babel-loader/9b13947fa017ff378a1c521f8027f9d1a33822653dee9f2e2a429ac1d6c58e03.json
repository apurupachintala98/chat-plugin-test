{"ast":null,"code":"var _jsxFileName = \"/Users/apurupachintala/Documents/GitHub/chat-plugin-test/src/components/ChatMessage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { Avatar, Box, Typography, Paper } from '@mui/material';\nimport chatbot from '../images/chatbot.png';\nimport user from '../images/user.png';\nimport hljs from 'highlight.js/lib/core';\nimport sql from 'highlight.js/lib/languages/sql';\nimport 'highlight.js/styles/github.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nhljs.registerLanguage('sql', sql);\n\n// const ChatMessage = ({ chatLog, chatbotImage, userImage, showResponse, storedResponse }) => {\n//   useEffect(() => {\n//     hljs.highlightAll();\n//   }, [chatLog, showResponse]);\n\n//   return (\n//     <Box sx={{ width: '100%', padding: '10px 0' }}>\n//       {chatLog.map((chat, index) => (\n//         <Box key={index} sx={{ display: 'flex', justifyContent: chat.role === 'assistant' ? 'flex-start' : 'flex-end', marginBottom: '10px' }}>\n//           <Paper elevation={2} sx={{ backgroundColor: chat.role === 'assistant' ? '#fff' : '#e0f7fa', padding: '12px', borderRadius: '15px', maxWidth: '80%', width: 'fit-content', boxShadow: '0px 0px 7px #898080', color: '#1a3673' }}>\n//             <Box sx={{ display: 'flex', alignItems: 'center' }}>\n//               {chat.role === 'assistant' ? (\n//                 <Avatar src={chatbotImage || chatbot} alt=\"Chatbot\" sx={{ mr: 2, width: 32, height: 32 }} />\n//               ) : (\n//                 <Avatar src={userImage || user} alt=\"User\" sx={{ borderRadius: '50%', width: 32, height: 32 }} />\n//               )}\n//               <Typography variant=\"body2\" sx={{ fontSize: 14, fontWeight: 'bold', ml: 1 }}>\n//                 {chat.isSQLResponse ? (\n//                   <pre><code className=\"sql\">{chat.content}</code></pre>\n//                 ) : (\n//                   chat.content\n//                 )}\n//               </Typography>\n\n//             </Box>\n//           </Paper>\n//         </Box>\n//       ))}\n//     </Box>\n\n//   );\n// };\n\nconst ChatMessage = ({\n  chatLog,\n  chatbotImage,\n  userImage\n}) => {\n  _s();\n  useEffect(() => {\n    hljs.highlightAll();\n  }, [chatLog]);\n  const renderContent = content => {\n    if (typeof content === 'string') {\n      // Detect SQL using simple keyword matching\n      const sqlKeywords = /\\b(SELECT|INSERT|UPDATE|DELETE|FROM|WHERE|JOIN|ON|GROUP BY|ORDER BY)\\b/i;\n      if (sqlKeywords.test(content)) {\n        return /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: /*#__PURE__*/_jsxDEV(\"code\", {\n            className: \"sql\",\n            children: content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this);\n      }\n      return /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        sx: {\n          fontSize: 14\n        },\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 14\n      }, this);\n    }\n    return content;\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: '100%',\n      padding: '10px 0'\n    },\n    children: chatLog.map((chat, index) => /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: chat.role === 'assistant' ? 'flex-start' : 'flex-end',\n        marginBottom: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 2,\n        sx: {\n          backgroundColor: chat.role === 'assistant' ? '#fff' : '#e0f7fa',\n          padding: '12px',\n          borderRadius: '15px',\n          maxWidth: '80%',\n          width: 'fit-content',\n          boxShadow: '0px 0px 7px #898080',\n          color: '#1a3673'\n        },\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Avatar, {\n            src: chat.role === 'assistant' ? chatbotImage : userImage,\n            alt: chat.role === 'assistant' ? 'Chatbot' : 'User',\n            sx: {\n              width: 32,\n              height: 32,\n              mr: 2\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this), Array.isArray(chat.content) ? chat.content.map((item, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: renderContent(item)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 49\n          }, this)) : renderContent(chat.content)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatMessage, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ChatMessage;\nexport default ChatMessage;\nvar _c;\n$RefreshReg$(_c, \"ChatMessage\");","map":{"version":3,"names":["React","useEffect","Avatar","Box","Typography","Paper","chatbot","user","hljs","sql","jsxDEV","_jsxDEV","registerLanguage","ChatMessage","chatLog","chatbotImage","userImage","_s","highlightAll","renderContent","content","sqlKeywords","test","children","className","fileName","_jsxFileName","lineNumber","columnNumber","variant","sx","fontSize","width","padding","map","chat","index","display","justifyContent","role","marginBottom","elevation","backgroundColor","borderRadius","maxWidth","boxShadow","color","alignItems","src","alt","height","mr","Array","isArray","item","i","_c","$RefreshReg$"],"sources":["/Users/apurupachintala/Documents/GitHub/chat-plugin-test/src/components/ChatMessage.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { Avatar, Box, Typography, Paper } from '@mui/material';\nimport chatbot from '../images/chatbot.png';\nimport user from '../images/user.png';\nimport hljs from 'highlight.js/lib/core';\nimport sql from 'highlight.js/lib/languages/sql';\nimport 'highlight.js/styles/github.css';\n\nhljs.registerLanguage('sql', sql);\n\n// const ChatMessage = ({ chatLog, chatbotImage, userImage, showResponse, storedResponse }) => {\n//   useEffect(() => {\n//     hljs.highlightAll();\n//   }, [chatLog, showResponse]);\n\n//   return (\n//     <Box sx={{ width: '100%', padding: '10px 0' }}>\n//       {chatLog.map((chat, index) => (\n//         <Box key={index} sx={{ display: 'flex', justifyContent: chat.role === 'assistant' ? 'flex-start' : 'flex-end', marginBottom: '10px' }}>\n//           <Paper elevation={2} sx={{ backgroundColor: chat.role === 'assistant' ? '#fff' : '#e0f7fa', padding: '12px', borderRadius: '15px', maxWidth: '80%', width: 'fit-content', boxShadow: '0px 0px 7px #898080', color: '#1a3673' }}>\n//             <Box sx={{ display: 'flex', alignItems: 'center' }}>\n//               {chat.role === 'assistant' ? (\n//                 <Avatar src={chatbotImage || chatbot} alt=\"Chatbot\" sx={{ mr: 2, width: 32, height: 32 }} />\n//               ) : (\n//                 <Avatar src={userImage || user} alt=\"User\" sx={{ borderRadius: '50%', width: 32, height: 32 }} />\n//               )}\n//               <Typography variant=\"body2\" sx={{ fontSize: 14, fontWeight: 'bold', ml: 1 }}>\n//                 {chat.isSQLResponse ? (\n//                   <pre><code className=\"sql\">{chat.content}</code></pre>\n//                 ) : (\n//                   chat.content\n//                 )}\n//               </Typography>\n\n//             </Box>\n//           </Paper>\n//         </Box>\n//       ))}\n//     </Box>\n\n//   );\n// };\n\nconst ChatMessage = ({ chatLog, chatbotImage, userImage }) => {\n  useEffect(() => {\n    hljs.highlightAll();\n  }, [chatLog]);\n\n  const renderContent = (content) => {\n    if (typeof content === 'string') {\n      // Detect SQL using simple keyword matching\n      const sqlKeywords = /\\b(SELECT|INSERT|UPDATE|DELETE|FROM|WHERE|JOIN|ON|GROUP BY|ORDER BY)\\b/i;\n      if (sqlKeywords.test(content)) {\n        return (\n          <pre>\n            <code className=\"sql\">{content}</code>\n          </pre>\n        );\n      }\n      return <Typography variant=\"body2\" sx={{ fontSize: 14 }}>{content}</Typography>;\n    }\n    return content;\n  };\n\n  return (\n    <Box sx={{ width: '100%', padding: '10px 0' }}>\n      {chatLog.map((chat, index) => (\n        <Box\n          key={index}\n          sx={{\n            display: 'flex',\n            justifyContent: chat.role === 'assistant' ? 'flex-start' : 'flex-end',\n            marginBottom: '10px',\n          }}\n        >\n          <Paper\n            elevation={2}\n            sx={{\n              backgroundColor: chat.role === 'assistant' ? '#fff' : '#e0f7fa',\n              padding: '12px',\n              borderRadius: '15px',\n              maxWidth: '80%',\n              width: 'fit-content',\n              boxShadow: '0px 0px 7px #898080',\n              color: '#1a3673',\n            }}\n          >\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              <Avatar\n                src={chat.role === 'assistant' ? chatbotImage : userImage}\n                alt={chat.role === 'assistant' ? 'Chatbot' : 'User'}\n                sx={{ width: 32, height: 32, mr: 2 }}\n              />\n              {Array.isArray(chat.content)\n                ? chat.content.map((item, i) => <div key={i}>{renderContent(item)}</div>)\n                : renderContent(chat.content)}\n            </Box>\n          </Paper>\n        </Box>\n      ))}\n    </Box>\n  );\n};\n\n\nexport default ChatMessage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}